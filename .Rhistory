<<<<<<< HEAD
=======
<<<<<<< HEAD
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v2.xlsx", skip = 2)
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
getwd()
getwd()
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
ggplot(aes(Gender)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) + labs(y = "Number of respondents", fill = "Buy EV")
p1 <- hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) +
labs(y = "Number of respondents", fill = "Buy EV") + theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplotly(p1)
hev1 %>% filter(Country == "Austria") %>% ggplot(aes(Plan_to_purchase_vehicle)) + geom_bar(aes(fill = buy_electric), position = "dodge") + labs(y = "Number of respondents", x = "Plan to buy car", fill = "Buy EV") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = hevtesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(fill = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(fill = tesla_sold) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(color = tesla_sold) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = hev1$tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop, color = tesla_sold)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
str(hev1)
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(colour = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
View(hev1)
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(fill = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + geom_point(aes(color = tesla_sold))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + geom_point()
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")  + geom_point()
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", legend = "Tesla sold in country") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla sold in country") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color(tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold) +
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
?color
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold), color = "red") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color(tesla_sold))) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_brewer(palette = "PuOr")
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_manual(c("black", "red"))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_manual(values=c("black", "red"))
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
=======
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- ggplot(tesla.eu.map) + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")+ coord_map(ylim = c(30, 71))
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(legend.position = "none") + theme_minimal()
gg
#geom_polygon(aes( group = group, fill = jaar))+
#geom_text(aes(label = region), data = region.lab.data,  size = 3, hjust = 0.5)+
#scale_fill_viridis_d() +
#theme_void()+
#theme(legend.position = "none")
library(ggplot2)
library(dplyr)
<<<<<<< HEAD
require(maps)
require(viridis)
theme_set(
theme_void()
)
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- ggplot(tesla.eu.map) + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")+ coord_map(ylim = c(35, 71))
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(legend.position = "none") + theme_minimal()
gg
#geom_polygon(aes( group = group, fill = jaar))+
#geom_text(aes(label = region), data = region.lab.data,  size = 3, hjust = 0.5)+
#scale_fill_viridis_d() +
#theme_void()+
#theme(legend.position = "none")
=======
library(lubridate)
>>>>>>> 14648ab262cf6ba991ba07d752a6ef11dd98ef03
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
NieuwMS <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
NieuwMS$Year <- recode(NieuwMS$Year, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
NieuwMS$Year <- as.integer(NieuwMS$Year)
NieuwMS$Market.Share <- as.double(NieuwMS$Market.Share)
TweedehandsMS <- tweedehands %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
TweedehandsMS$Year <- recode(TweedehandsMS$Year, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Tweedehands <- tweedehands %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Tweedehands$Year <- as.integer(Tweedehands$Year)
TweedehandsMS$Year <- as.integer(TweedehandsMS$Year)
TweedehandsMS$Market.Share <- as.double(TweedehandsMS$Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
#Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(NieuwMS$Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
#Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(NieuwMS$Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(NieuwMS$Market.Share)
Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(NieuwMS$Market.Share)
Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(NieuwMS$Market.Share)
Nieuw <- Nieuw %>% select(Fuel, Year, `Cars sold`, Market.Share)
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Tweedehands <- tweedehands %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Tweedehands$Year <- recode(Tweedehands$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Tweedehands <- tweedehands %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Tweedehands$Year <- as.integer(Tweedehands$Year)
Tweedehands$Market.Share <- as.double(TweedehandsMS$Market.Share)
Tweedehands <- Tweedehands %>% select(Fuel, Year, `Cars sold`, Market.Share)
View(Tweedehands)
l <- Nieuw %>% filter(Year == 2019, Market.Share < 0.01)
l
shiny::runApp('Dashboard')
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
=======
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(Nieuw$Market.Share)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(Nieuw$Market.Share)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
View(Nieuw)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$MSYear <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
#Lien
#financiele cijfers
>>>>>>> 0bbc61cd555d59b08f4b67ea712b20bf6595f290
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_Margin <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_profit <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("numeric", "text", "numeric", "numeric", "numeric"))
Free_cashflow <- read_xlsx("Data/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("numeric", "text", "numeric"))
<<<<<<< HEAD
##cleaning
=======
<<<<<<< HEAD
#uitbreiding europa
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
#financiele cijfers, functies
revenue <- function(yearinput,df) {
revenue <- df %>% filter(df$Year == yearinput)
return(revenue)
}
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
View(countriesafpassengercars)
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Customers: loyalty
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v2.xlsx", skip = 2)
runApp('Dashboard')
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
# Set theme
theme_set(theme_minimal())
# Create plot
loyalty_per_brand_plot <- ggplot(loyalty_per_brand_tibble,
aes(x = Percentage,
y = Brand)) +
geom_bar(stat = "identity",
fill = "tomato3") +
theme(axis.text.y = element_text(vjust=0.6))
# Te doen:
# - Tesla in andere kleur (Puurder rood, rest mss in zachter rood, om toch in stijl te blijven)
# - Percentages ipv. 0.6 enzo
# - Percentages schaal tot 100%
# - (Optioneel) Namen brands groter
# - Ggplotly zodat je precieze percentage ook ziet. Dan kan mogelijk checkbox zelfs weg.(Want wil ...
#   ... kunnen filteren op luxury/mass market of beiden). Mss voegt plotly ook toe dat merken kan ...
#   ... kiezen, anders eventueel zelf toevoegen
# Print plot
loyalty_per_brand_plot
})
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
# Set theme
theme_set(theme_minimal())
# Create plot
loyalty_per_brand_plot <- ggplot(loyalty_per_brand_tibble,
aes(x = Percentage,
y = Brand)) +
geom_bar(stat = "identity",
fill = "tomato3") +
theme(axis.text.y = element_text(vjust=0.6))
# Te doen:
# - Tesla in andere kleur (Puurder rood, rest mss in zachter rood, om toch in stijl te blijven)
# - Percentages ipv. 0.6 enzo
# - Percentages schaal tot 100%
# - (Optioneel) Namen brands groter
# - Ggplotly zodat je precieze percentage ook ziet. Dan kan mogelijk checkbox zelfs weg.(Want wil ...
#   ... kunnen filteren op luxury/mass market of beiden). Mss voegt plotly ook toe dat merken kan ...
#   ... kiezen, anders eventueel zelf toevoegen
# Print plot
loyalty_per_brand_plot
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Pieter
#Customers: loyalty
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v2.xlsx", skip = 2)
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
getwd()
getwd()
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Lien
#financiele cijfers
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_Margin <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_profit <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("numeric", "text", "numeric", "numeric", "numeric"))
Free_cashflow <- read_xlsx("Data/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("numeric", "text", "numeric"))
#uitbreiding europa
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
#financiele cijfers, functies
revenue <- function(yearinput,df) {
revenue <- df %>% filter(df$Year == yearinput)
return(revenue)
}
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
View(countriesafpassengercars)
runApp('Dashboard')
runApp('Dashboard')
runApp()
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard')
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('Dashboard')
runApp()
=======
<<<<<<< HEAD
=======
=======
shiny::runApp('Dashboard')
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp('Dashboard')
runApp('Dashboard')
order(countriesafpassengercars$Year, countriesafpassengercars$waardes)
countriesafpassengercars[order(countriesafpassengercars$Year, countriesafpassengercars$waardes)]
countriesafpassengercars <- order(countriesafpassengercars$Year, countriesafpassengercars$waardes)
countriesafpassengercars$Country <- factor(countriesafpassengercars$Country,
levels = countriesafpassengercars$Country)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp('Dashboard_Jaske')
<<<<<<< HEAD
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
sessionInfo()
RStudio.Version()
sudo gdebi <rstudio-server-package.deb>
sudo gdebi <rstudio-server-package.deb>
sudo yum install --nogpgcheck <rstudio-server-package.rpm>
runApp('Dashboard')
sessionInfo()
installr:install.packages("installr")
install.packages("installr")
library(installr)
updateR()
sessionInfo()
=======
getwd()
getwd()
runApp('Dashboard_Jaske')
<<<<<<< HEAD
library(shiny)
library(shinydashboard)
library(ggplot2)
=======
=======
>>>>>>> 0bbc61cd555d59b08f4b67ea712b20bf6595f290
Revenuetabel <- Revenue %>% group_by(Year) %>%
mutate("totalrevenue" = sum(Revenue, na.rm = TRUE)/1000000)
Free_cashflow <- Free_cashflow %>% group_by(Year) %>%
mutate("totalfreecashflow" = sum(`free cash flow`, na.rm = TRUE)/1000000)
Gross_profit <- Gross_profit %>% group_by(Year) %>%
mutate("totalgrossprofit" = sum(`Gross Profit`, na.rm = TRUE)/1000000)
Gross_Margin <- Gross_Margin %>% group_by(Year) %>%
mutate("totalgrossmargin" = sum(`Gross Margin`, na.rm = TRUE))
Revenuetabel <- Revenuetabel %>% unite(Year, Quarter, col = "Date", sep = " ")
Gross_profit <- Gross_profit %>% unite(Year, Quarter, col = "Date", sep = " ")
Free_cashflow <- Free_cashflow %>% unite(Year, Quarter, col = "Date", sep = " ")
Gross_Margin <- Gross_Margin %>% unite(Year, Quarter, col = "Date", sep = " ")
<<<<<<< HEAD
Revenuetabelnorm <- Revenuetabel %>% select(Date, Revenue)
Gross_profitnorm <- Gross_profit %>% select(Date, `Gross Profit`)
Gross_Marginnorm <- Gross_Margin %>% select(Date, `Gross Margin`)
Free_cashflownorm <- Free_cashflow %>% select(Date, `free cash flow`)
Revenuetabelsom <- Revenuetabel %>% select(Date, totalrevenue)
Gross_profitsom <- Gross_profit %>% select(Date, totalgrossprofit)
Gross_Marginsom <- Gross_Margin %>% select(Date, totalgrossmargin)
Free_cashflowsom <- Free_cashflow %>% select(Date, totalfreecashflow)
Financial_numbersnorm <- left_join(Revenuetabelnorm, Gross_profitnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Gross_Marginnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Free_cashflownorm, by = "Date")
Financial_numbersnorm <- Financial_numbersnorm %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numbersnorm$'Year' <- as.numeric(Financial_numbersnorm$'Year')
Financial_numbersnorm$'Revenue' <- as.numeric(Financial_numbersnorm$'Revenue')
Financial_numbersnorm$'Gross Profit' <- as.numeric(Financial_numbersnorm$'Gross Profit')
Financial_numbersnorm$'Gross Margin' <- as.numeric(Financial_numbersnorm$'Gross Margin')
Financial_numbersnorm$'free cash flow' <- as.numeric(Financial_numbersnorm$'free cash flow')
Financial_numbers_gather_norm <- Financial_numbersnorm %>% gather('Revenue', 'Gross Profit', 'Gross Margin', 'free cash flow', key = 'typenumber', value = 'finvalue')
Financial_numberssom <- left_join(Revenuetabelsom, Gross_profitsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Gross_Marginsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Free_cashflowsom, by = "Date")
Financial_numberssom <- Financial_numberssom %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numberssom$'Year' <- as.numeric(Financial_numberssom$'Year')
Financial_numberssom$'totalrevenue' <- as.numeric(Financial_numberssom$'totalrevenue')
Financial_numberssom$'totalgrossprofit' <- as.numeric(Financial_numberssom$'totalgrossprofit')
Financial_numberssom$'totalgrossmargin' <- as.numeric(Financial_numberssom$'totalgrossmargin')
Financial_numberssom$'totalfreecashflow' <- as.numeric(Financial_numberssom$'totalfreecashflow')
Financial_numbers_gather_som <- Financial_numberssom %>% gather('totalrevenue', 'totalgrossprofit', 'totalgrossmargin', 'totalfreecashflow', key = 'typenumber', value = 'finvalue') %>% select(Year, typenumber, finvalue) %>% distinct()
##financiele cijfers, functies
financefunction <- function(yearinput,df) {
financefunction <- df %>% filter(df$Year == yearinput)
return(financefunction)
}
#uitbreiding europa
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
#Pieter
# Customers: loyalty
# Load data
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v4.xlsx", skip = 2)
# Make tibble (already was, but just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Select row with Tesla to later add to both luxury and mass market
loyalty_per_brand_Tesla <- loyalty_per_brand_tibble %>% filter(Brand == "Tesla")
# # Growth: Comparison
#
#   # growth_comp_data_5 <- read_xlsx("Dashboard/Data/growth_comparison_v5.xlsx")
#   # View(growth_comp_data_5)
#
#   # Ik denk correctere versie
#   # growth_comp_data_5 <- read_xlsx("Data/growth_comparison_v5.xlsx")
#
#
#   # Placeholder for presentation 10-11-20
#     # Select
#     growth_comp_sales_2019_1 <- growth_comp_data_5 %>%
#                                   select(c("Submodel", "2019")) %>%
#                                   drop_na("2019") %>%
#                                   # Drop others and segment total
#                                   drop_na("Submodel")
#
#     # To retain the order in the plot
#     growth_comp_sales_2019_1$"2019" <- factor(growth_comp_sales_2019_1$"2019",
#                                        levels = growth_comp_sales_2019_1$"2019")
#jaske
eusurvey <- read.csv("data/hev1.csv")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('~/Unief 2/1e Master/Business intelligence/Project/BUSIN/Dashboard_Lien')
runApp('Dashboard_Lien')
=======
Revenuetabel <- rename(Revenuetabel, c("Automotive Revenues Tesla" = "Revenue"))
Revenuetabel <- rename(Revenuetabel, c("Revenue" = "Automotive Revenues Tesla"))
Gross_profit <- Gross_profit %>% rename(c("Automotive gross profit GAAP" = "Gross Profit"))
Revenuetabel <- rename(Revenuetabel, c("Revenue" = "Automotive Revenues Tesla"))
knitr::opts_chunk$set(echo = TRUE)
>>>>>>> f71ce88a5ebe6a14b00d7e726d407cec96acea3d
>>>>>>> 0bbc61cd555d59b08f4b67ea712b20bf6595f290
library(shiny)
library(shinydashboard)
library(ggplot2)
=======
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
library(tidyr)
library(dplyr)
library(lubridate)
library(readr)
library(plotly)
library(DT)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
sessionInfo()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
>>>>>>> d65ccaee402a9f9fbc60089d4dadf805ce12194b
>>>>>>> fd680d8a799fa2a44bce89346f72d8174e72e26e
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
view(Financial_numbers_gather_som)
View(Financial_numbers_gather_som)
View(Financial_numbers_gather_som)
runApp('Dashboard')
<<<<<<< HEAD
shiny::runApp('Dashboard')
=======
<<<<<<< HEAD
=======
library(maps)
library(gghighlight)
#finance
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_Margin <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_profit <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("numeric", "text", "numeric", "numeric", "numeric"))
Free_cashflow <- read_xlsx("Data/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("numeric", "text", "numeric"))
##cleaning
Revenuetabel <- Revenue %>% group_by(Year) %>%
mutate("totalrevenue" = sum(Revenue, na.rm = TRUE)/1000000)
Free_cashflow <- Free_cashflow %>% group_by(Year) %>%
mutate("totalfreecashflow" = sum(`free cash flow`, na.rm = TRUE)/1000000)
Gross_profit <- Gross_profit %>% group_by(Year) %>%
mutate("totalgrossprofit" = sum(`Gross Profit`, na.rm = TRUE)/1000000)
Gross_Margin <- Gross_Margin %>% group_by(Year) %>%
mutate("totalgrossmargin" = sum(`Gross Margin`, na.rm = TRUE))
Revenuetabel <- Revenuetabel %>% unite(Year, Quarter, col = "Date", sep = " ")
Gross_profit <- Gross_profit %>% unite(Year, Quarter, col = "Date", sep = " ")
Free_cashflow <- Free_cashflow %>% unite(Year, Quarter, col = "Date", sep = " ")
Gross_Margin <- Gross_Margin %>% unite(Year, Quarter, col = "Date", sep = " ")
Revenuetabelnorm <- Revenuetabel %>% select(Date, Revenue)
Gross_profitnorm <- Gross_profit %>% select(Date, `Gross Profit`)
Gross_Marginnorm <- Gross_Margin %>% select(Date, `Gross Margin`)
Free_cashflownorm <- Free_cashflow %>% select(Date, `free cash flow`)
Revenuetabelsom <- Revenuetabel %>% select(Date, totalrevenue)
Gross_profitsom <- Gross_profit %>% select(Date, totalgrossprofit)
Gross_Marginsom <- Gross_Margin %>% select(Date, totalgrossmargin)
Free_cashflowsom <- Free_cashflow %>% select(Date, totalfreecashflow)
Financial_numbersnorm <- left_join(Revenuetabelnorm, Gross_profitnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Gross_Marginnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Free_cashflownorm, by = "Date")
Financial_numbersnorm <- Financial_numbersnorm %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numbersnorm$'Year' <- as.numeric(Financial_numbersnorm$'Year')
Financial_numbersnorm$'Revenue' <- as.numeric(Financial_numbersnorm$'Revenue')
Financial_numbersnorm$'Gross Profit' <- as.numeric(Financial_numbersnorm$'Gross Profit')
Financial_numbersnorm$'Gross Margin' <- as.numeric(Financial_numbersnorm$'Gross Margin')
Financial_numbersnorm$'free cash flow' <- as.numeric(Financial_numbersnorm$'free cash flow')
Financial_numbers_gather_norm <- Financial_numbersnorm %>% gather('Revenue', 'Gross Profit', 'Gross Margin', 'free cash flow', key = 'typenumber', value = 'finvalue')
Financial_numberssom <- left_join(Revenuetabelsom, Gross_profitsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Gross_Marginsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Free_cashflowsom, by = "Date")
Financial_numberssom <- Financial_numberssom %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numberssom$'Year' <- as.numeric(Financial_numberssom$'Year')
Financial_numberssom$'totalrevenue' <- as.numeric(Financial_numberssom$'totalrevenue')
Financial_numberssom$'totalgrossprofit' <- as.numeric(Financial_numberssom$'totalgrossprofit')
Financial_numberssom$'totalgrossmargin' <- as.numeric(Financial_numberssom$'totalgrossmargin')
Financial_numberssom$'totalfreecashflow' <- as.numeric(Financial_numberssom$'totalfreecashflow')
Financial_numbers_gather_som <- Financial_numberssom %>% gather('totalrevenue', 'totalgrossprofit', 'totalgrossmargin', 'totalfreecashflow', key = 'typenumber', value = 'finvalue') %>% select(Year, typenumber, finvalue) %>% distinct()
##financiele cijfers, functies
financefunction <- function(yearinput,df) {
financefunction <- df %>% filter(df$Year == yearinput)
return(financefunction)
}
# #uitbreiding europa, data in juiste vorm krijgen
# countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
# countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
#                                         'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
#                                         'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
#                                         'Spain', 'Sweden')
# countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
# countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
#                                               'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
#                                               'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
#                                               'Spain', 'Sweden')
#
# #wereldkaart
#
# teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
#
# some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
#
# some.eu.map <- map_data("world", region = some.eu.countries)
# tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
<<<<<<< HEAD
Financial_numbers_gather_som %>% filter(Year == input$Yearrev, typenumber == 'totalrevenue') %>% group_by(Year)
=======
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
runApp()
runApp('Dashboard')
install.packages("toOrdinal")
runApp()
runApp('Dashboard')
runApp('Dashboard_Pieter')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
installed.packages(quantmod)
install.packages("quantmod")
=======
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
library(quantmod)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
library(quantmod)
start <- as.Date("2016-01-01")
end <- as.Date("2016-10-01")
getSymbols("TSLA", src = "yahoo", from = start, to = end)
head(TSLA)
start <- as.Date("2016-01-01")
end <- as.Date("2020-11-14")
getSymbols("TSLA", src = "yahoo", from = start, to = end)
head(TSLA)
tail(TSLA)
plot(TSLA[, "TSLA.Close"], main = 'TSLA')
ggplotly() %>% TSLA %>% plot([, "TSLA.Close"], main = 'TSLA')
TSLA %>% ggplot(aes("TSLA.Close"), main = 'TSLA')
install.packages("tidyquant")
TSLA %>% ggplot(aes(x = index, y= "TSLA.Close"), main = 'TSLA')
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
library(quantmod)
library(plotly)
library(tidyverse)
library(tidyquant)
#getSymbols("TSLA", src = "yahoo", from = start, to = end)
TSLA <- tq_get("TSLA", get = "stock.prices", from = "2015-09-01", to = "2020-11-13")
tail(TSLA)
TSLA %>% ggplot(aes(x='date' , y= "close")) + geom_abline()
TSLA %>% ggplot(aes(date , close)) + geom_abline()
TSLA %>% ggplot(aes(date , close)) + geom_line()
TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA Line Chart", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA Line Chart", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
#getSymbols("TSLA", src = "yahoo", from = start, to = end)
TSLA <- tq_get("TSLA", get = "stock.prices", from = start, to = end)
tail(TSLA)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard')
<<<<<<< HEAD
install.packages('ggextra')
install.packages('ggExtra')
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('~/Unief 2/1e Master/Business intelligence/Project/BUSIN/Dashboard_Lien')
runApp('Dashboard_Lien')
>>>>>>> f71ce88a5ebe6a14b00d7e726d407cec96acea3d
>>>>>>> 0bbc61cd555d59b08f4b67ea712b20bf6595f290
shiny::runApp('Dashboard')
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard')
runApp('Dashboard')
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") + geom_smooth()
theme_tq()
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") + geom_smooth(method = "lm") +
theme_tq()
ggplotly(p)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") +
theme_tq()
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
shiny::runApp('Dashboard')
runApp('Dashboard')
=======
=======
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = Sales - lag(Sales))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
<<<<<<< HEAD
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[Year == max(Year)] - Sales[Year == min(Year)]))
VPSC2
shiny::runApp('Dashboard_Jaske')
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
install.packages('toOrdinal')
install.packages("toOrdinal")
install.packages('toOrdinal')
install.packages("toOrdinal")
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
=======
>>>>>>> 298fd560bd9a0f444a6ba4fc40a7d7f1de761adc
>>>>>>> 14648ab262cf6ba991ba07d752a6ef11dd98ef03
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
