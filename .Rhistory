<<<<<<< HEAD
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales")
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
=======
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
for(val in count(Revenue$Year)) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in count(b)) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
}
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == input$Yearrev], na.rm = TRUE)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
runApp('Dashboard_Lien')
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a[[1]] <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
}
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
sum(Revenue$`1000_revenue`)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
sum(Revenue$`1000_revenue`, na.rm = TRUE)
c(sum(Revenue$Year[min(input$Yearrevline)[Revenue$`1000_revenue`]], na.rm = TRUE):
sum(Revenue$Year[max(input$Yearrevline)[Revenue$`1000_revenue`]], na.rm = TRUE))
c(sum(Revenue$Year[2015[Revenue$`1000_revenue`]], na.rm = TRUE):
sum(Revenue$Year[2020[Revenue$`1000_revenue`]], na.rm = TRUE))
c(sum(Revenue$Year[2015][Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[2020][Revenue$`1000_revenue`], na.rm = TRUE))
c(sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE))
a <-  c(sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Year == 2020], na.rm = TRUE))
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015][1], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020][1], na.rm = TRUE))
print(a)
knitr::opts_chunk$set(echo = TRUE)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
>>>>>>> a7f0df7bae219b8665105e5c4ff68fa66e734c16
library(dplyr)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
library(readr)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
library(readxl)
<<<<<<< HEAD
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales")
#str(verkoo)
verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
#str(verkoo)
verkoo <- data.frame(verkoo)
str(verkoo)
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
superchargersC <- superchargers %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
str(superchargersC)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
#str(superchargersC)
superchargersC <- count(superchargersC, "Country")
str(superchargersC)
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
#str(superchargersC)
superchargersC <- plyr::count(superchargersC, "Country")
str(superchargersC)
ratio <- full_join(superchargersC, verkooC, by = 'Country')
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
#x-as moet gaan van 2008-2019
VPS %>% ggplot(aes(x = Segment, y = Sales)) + geom_col() + facet_wrap(Year~.) + labs(title = "New cars sold in the EU by segment in million units for each year.") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
View(nieuw)
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
eu <- read_xlsx("Data/% share of new passenger cars by fuel type in the EU.xlsx")
ElectricMS <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("MS")) %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("20")) %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
NieuwMS <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19, key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric$Year <- as.integer(Electric$Year)
Nieuw$Year <- as.integer(Nieuw$Year)
str(NieuwMS)
ElectricMS <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("MS")) %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("20")) %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
NieuwMS <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19, key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric$Year <- as.integer(Electric$Year)
Nieuw$Year <- as.integer(Nieuw$Year)
NieuwMS$`Market Share` <- as.double(NieuwMS$`Market Share`)
str(NieuwMS)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(dplyr)
library(ggplot2)
library(tidyr)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
eu <- read_xlsx("Data/% share of new passenger cars by fuel type in the EU.xlsx")
ElectricMS <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("MS")) %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric <- nieuw %>% filter(Fuel == "elektrisch") %>% select(starts_with("20")) %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
NieuwMS <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19, key = "Year", value = "Market Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Electric$Year <- as.integer(Electric$Year)
Nieuw$Year <- as.integer(Nieuw$Year)
NieuwMS$`Market Share` <- as.double(NieuwMS$`Market Share`)
str(NieuwMS)
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
=======
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% summarize(totaal = sum(`1000_revenue`, na.rm = TRUE))
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% group_by(Year) %>% summarize(totaal = sum(`1000_revenue`, na.rm = TRUE))
sum(a, na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% group_by(Year) %>% summarize(totaal = sum(`1000_revenue`, na.rm = TRUE))
a
sum(a, na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a, na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a[totaal], na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a$totaal, na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% filter( Year >= 2016 & Year <= 2019) %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a$totaal, na.rm = TRUE)
shiny::runApp('Dashboard_Lien')
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% filter( Year >= 2015 & Year <= 2020) %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a$totaal, na.rm = TRUE)
library(readxl)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
a <-  Revenue %>% filter( Year >= 2015 & Year <= 2020) %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
a
sum(a$totaal, na.rm = TRUE)
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map %>% filter(subregion != c("Svalbard", "Jan Mayen"))
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map %>% filter(region == "Norway", subregion != c("Svalbard", "Jan Mayen"))
gg <- tesla.eu.map %>% filter(region == "Norway", subregion != c("Svalbard", "Jan Mayen")) %>% ggplot() + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = 2013), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white')) + scale_fill_manual( values = c("tomato", "skyblue"))
gg
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- tesla.eu.map %>% filter(region == "Norway", subregion != "Svalbard") %>% ggplot() + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = 2013), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white')) + scale_fill_manual( values = c("tomato", "skyblue"))
gg
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- tesla.eu.map %>% filter(subregion != "Svalbard") %>% ggplot() + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = 2013), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white')) + scale_fill_manual( values = c("tomato", "skyblue"))
gg
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- tesla.eu.map %>% filter(subregion != "Svalbard") %>% ggplot() + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = c(2013, 2014)), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white')) + scale_fill_manual( values = c("tomato", "skyblue"))
gg
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map <- tesla.eu.map %>% filter(subregion != "Svalbard")
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
library(shiny)
>>>>>>> a7f0df7bae219b8665105e5c4ff68fa66e734c16
library(readxl)
library(ggplot2)
library(tidyr)
library(shinydashboard)
library(dplyr)
library(tidyr)
<<<<<<< HEAD
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Data/Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
#Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data <- data %>% gather(January:December, key=  "Month", value="Sales")%>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
Data$Year <- as.factor(Data$Year)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
Data %>% ggplot(aes(x = Month, y = Sales)) + geom_col() + facet_wrap(Year~.) + labs(title = "Periodic Tesla sales over the years.") + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_continuous(breaks = seq(0,12, by = 1))
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
install.packages(ggiraph)
install.packages("ggiraph")
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard')
runApp('Dashboard')
=======
library(lubridate)
<<<<<<< HEAD
hev <- read.csv2("Data/HEV_article_2018_filtered.csv")
View(hev)
str(hev)
hev <- hev %>% select(-Car_sharing_)
hev1 <- hev %>% mutate(Gender = as.factor(Gender),
Education_level = as.factor(Education_level),
Employment_status = as.factor(Employment_status),
Income_group = as.factor(Income_group),
Country = as.factor(Country),
buy_electric = as.logical(buy_electric),
Household_members_number = as.factor(Household_members_number),
Plan_to_purchase_vehicle = as.factor(Plan_to_purchase_vehicle))
levels(hev1$Gender) <- c("M", "F")
levels(hev1$Country) <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain",
"Sweden", "Great Britain", "Malta", "Luxembourg", "Cyprus")
levels(hev1$Education_level) <- c("Primary (elementary school)",
"Lower secondary (upper elementary school)",
"Upper secondary (high school)",
"Tertiary and higher (University degree or PhD)")
levels(hev1$Employment_status) <- c("Full time employed", "Part time employed", "Unemployed",
"Studying", "Retired", "Other", "I prefer not to answer")
levels(hev1$Household_members_number) <- c("one (myself)", "two", "three", "four", "five",
"more than five", "I prefer not to answer")
levels(hev1$Plan_to_purchase_vehicle) <- c("Yes, in the next 6 months",
"Yes, in the next 12 months",
"Yes, in the next 2 years", "No",
"Don’t know/no answer")
levels(hev1$Income_group) <- c("high", "higher middle", "middle", "lower middle", "low",
"I prefer not to answer")
hev1 %>% summary()
hev1 %>% ggplot(aes(Age)) + geom_bar(aes(fill = buy_electric), position = "fill")
hev1 %>% ggplot(aes(Gender)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% ggplot(aes(Income_group)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% filter(Country == "Belgium") %>% group_by(Country, Gender, buy_electric) %>% summarise(n = n(), median(Age)) %>% arrange(desc(n))
levels(hev1$Income_group)
hev1 %>% filter(Country == 'Belgium') %>%
ggplot(aes(Gender)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge", ylab("Number of respondents")) +
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) + labs(y = "Number of respondents")
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) + labs(y = "Number of respondents", fill = "Buy EV")
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
?dataTableOutput
?dataTable
?renderDataTable
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp()
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
=======
library(readr)
library(plotly)
library(maps)
#financiele cijfers
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_Margin <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_profit <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("numeric", "text", "numeric", "numeric", "numeric"))
Free_cashflow <- read_xlsx("Data/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("numeric", "text", "numeric"))
#uitbreiding europa
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
#financiele cijfers, functies
revenue <- function(yearinput,df) {
revenue <- df %>% filter(df$Year == yearinput)
return(revenue)
}
somvoorbox <- function(df, jaar, inputjaar, colnaam) {
somjaren <- df %>% filter(jaar >= min(inputjaar) & jaar <= max(inputjaar)) %>% group_by(jaar) %>% summarize(totaal = sum(colnaam, na.rm = TRUE))
somresultaat <- format(round(sum(somjaren$totaal, na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)
return(somresultaat)
}
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
#financieel tabblad
sortofgraph <- reactive({input$Quarterly})
output$revbox <- renderValueBox({
if (sortofgraph() == TRUE) {
valueBox(
paste0(format(round(sum(Revenue$`Automotive Revenues Tesla`[Revenue$Year == input$Yearrev], na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle= paste0("Revenue ", input$Yearrev, " in million"),
icon = icon("dollar-sign"), color = 'red'
)
}
else {
somjaren <- Revenue %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>% summarize(totaal = sum(`Automotive Revenues Tesla`, na.rm = TRUE))
valueBox(
paste0(format(round(sum(somjaren$totaal, na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle= paste0("Revenue from ", min(input$Yearrevline), " until ", max(input$Yearrevline), " in million"),
icon = icon("dollar-sign"), color = 'red'
)
}
})
output$frcashbox <- renderValueBox({
if (sortofgraph() == TRUE) {
valueBox(
paste0(format(round(sum(Free_cashflow$`free cash flow`[Free_cashflow$Year == input$Yearrev], na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle = paste0("Free cashflow ", input$Yearrev, " in million"),
icon = icon("dollar-sign"), color = 'red'
)
}
else {
somjaren <- Free_cashflow %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>% summarize(totaal = sum(`free cash flow`, na.rm = TRUE))
valueBox(
paste0(format(round(sum(somjaren$totaal, na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle = paste0("Free cashflow from ", min(input$Yearrevline), " until ", max(input$Yearrevline), " in million"),
icon = icon("dollar-sign"), color = 'red'
)
}
})
output$grprbox <- renderValueBox({
if (sortofgraph() == TRUE) {
valueBox(
paste0(format(round(sum(Gross_profit$`Automotive gross profit GAAP`[Gross_profit$Year == input$Yearrev], na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle = paste0("Gross profit ", input$Yearrev, " in million"),
icon = icon("piggy-bank"), color = 'red'
)
}
else {
somjaren <- Gross_profit %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>% summarize(totaal = sum(`Automotive gross profit GAAP`, na.rm = TRUE))
valueBox(
paste0(format(round(sum(somjaren$totaal, na.rm = TRUE)/1000000, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)),
subtitle = paste0("Gross profit from ", min(input$Yearrevline), " until ", max(input$Yearrevline), " in million"),
icon = icon("piggy-bank"), color = 'red'
)
}
})
output$colrev <- renderPlot({
if (sortofgraph() == TRUE) {
# generate bins based on input$bins from ui.R
x    <- Revenue$Year
Yearrev <- seq(min(x), max(x), length.out = input$Yearrev)
revvar <- revenue(input$Yearrev, Revenue)
revvar %>% ggplot(aes(x = Quarter, y = `Automotive Revenues Tesla`/1000000, fill= Quarter))+ geom_col(position="dodge") +
labs(title = input$Yearrev, y = 'Automotive revenue')  + geom_text(aes(label = `Automotive Revenues Tesla`/1000000), vjust = -0.5 ) +
scale_y_continuous(limits = c(0, 8000), breaks = seq(0,8000, by= 1000))
}
else {
y    <- Revenue$Year
Yearrevline <- seq(min(y), max(y))
revvar <- Revenue %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>%
mutate("totaal" = sum(`Automotive Revenues Tesla`, na.rm = TRUE)/1000000) %>% select(Year, totaal)%>% distinct()
revvar %>% ggplot(aes(x = Year , y = totaal))+ geom_line() + geom_point() + geom_text(aes(label = format(round(totaal, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)), vjust = -0.5 ) +
labs(y = 'Automotive revenue') +
scale_y_continuous(limits = c(0, 21000), breaks = seq(0, 21000, by = 5000))
}
})
output$colfrcash <- renderPlot({
if (sortofgraph() == TRUE) {
freecashvar <- revenue(input$Yearrev, Free_cashflow)
freecashvar %>% ggplot(aes(x= Quarter, y= `free cash flow`/1000000, fill = Quarter)) +
geom_col(position="dodge") + geom_text(aes(label = `free cash flow`/1000000), vjust = -0.5 ) +
labs(title = input$Yearrev, y = 'Free cash flow') +
scale_y_continuous(limits = c(-1500, 1500), breaks = seq(-1500,1500, by = 500))
}
else {
freecashvar <-  Free_cashflow %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>%
mutate("totaal" = sum(`free cash flow`, na.rm = TRUE)/1000000) %>% select(Year, totaal)%>% distinct()
freecashvar %>% ggplot(aes(x = Year , y = totaal))+
geom_line() + geom_point() + geom_text(aes(label = format(round(totaal, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)), vjust = -0.5 ) +
labs(y = 'Free cash flow')  + scale_y_continuous(limits = c(-4000, 1300), breaks = seq(-4000, 1300, by= 1000))
}
})
output$colgrpr <- renderPlot({
if (sortofgraph() == TRUE) {
grossprofitvar <- revenue(input$Yearrev, Gross_profit)
grossprofitvar %>%
ggplot(aes(x = Quarter, y = `Automotive gross profit GAAP`/1000000, fill= Quarter)) +
geom_col(position="dodge") +  geom_text(aes(label = `Automotive gross profit GAAP`/1000000), vjust = -0.5 ) +
labs(title = input$Yearrev, y= 'Gross profit') +
scale_y_continuous(limits = c(0,2500), breaks = seq(0,2500, by= 500))
}
else {
grossprofitvar <- Gross_profit %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>%
mutate("totaal" = sum(`Automotive gross profit GAAP`, na.rm = TRUE)/1000000) %>% select(Year, totaal)%>% distinct()
grossprofitvar %>% ggplot(aes(x = Year , y = totaal)) +
geom_line() + geom_point() + geom_text(aes(label = format(round(totaal, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)), vjust = -0.5 ) +
labs(y = "Gross profit")  + scale_y_continuous(limits = c(0, 5000), breaks = seq(0, 5000, by= 1000))
}
})
output$colgrmar <- renderPlot({
if (sortofgraph() == TRUE) {
grossmarginvar <- revenue(input$Yearrev, Gross_Margin)
grossmarginvar %>%
ggplot(aes(x = Quarter, y = `Gross margin Automotive GAAP`, fill= Quarter)) +
geom_col(position="dodge") + geom_text(aes(label = `Gross margin Automotive GAAP`), vjust = -0.5 ) +
labs(title = input$Yearrev, y= 'Gross margin') +
scale_y_continuous(limits = c(0,30), breaks = seq(0, 30, by= 5))
}
else {
grossmarginvar <- Gross_Margin %>% filter(Year >= min(input$Yearrevline) & Year <= max(input$Yearrevline)) %>% group_by(Year) %>%
mutate("totaal" = sum(`Gross margin Automotive GAAP`, na.rm = TRUE)) %>% select(Year, totaal)%>% distinct()
grossmarginvar %>% ggplot(aes(x = Year , y = totaal)) +
geom_line() + geom_point() + geom_text(aes(label = format(round(totaal, 2), decimal.mark = ",", big.mark = " ", small.mark = " ", small.interval = 3)), vjust = -0.5 ) +
labs(y = "Gross margin")  + scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, by= 10))
}
})
#Uitbreiding naar de EU
checkeurope <- reactive({input$Europe})
output$colpascar <- renderPlot({
if (checkeurope() == 2) {
countriespasscarvar <- countriesafpassengercars %>% filter(Country == input$EUoptions, Fuel %in% input$EUcheck)
countriespasscarvar %>%
ggplot(aes(x = Year, y = waardes, fill = Fuel)) +
geom_col(position = "dodge") +
labs(title = input$EUoptions, y = '')  +
scale_y_continuous(limits = c(0, 3600000), breaks = seq(0,4000000, by= 500000)) +
scale_x_continuous(limits= c(min(countriesafpassengercars$Year), max(countriesafpassengercars$Year)) , breaks = seq(min(countriesafpassengercars$Year), max(countriesafpassengercars$Year), by = 1))
}
else {
countriespasscarvar <- countriesafpassengercars %>% filter(Fuel %in% input$EUcheck, Year == input$YearEU)
countriespasscarvar %>%
ggplot(aes(x = Country, y = waardes, fill = Fuel ))+
geom_col(position = "dodge") +
labs(title = input$YearEU, y = '')  +
scale_y_continuous(limits = c(0, 3600000), breaks = seq(0,4000000, by= 500000)) +
coord_flip()
}
})
output$colinfr <- renderPlot({
if (checkeurope() == 2) {
countriesinfrvar <- countriesafinfrastructure %>% filter(Country == input$EUoptions, Fuel %in% input$EUcheckinfr)
countriesinfrvar %>%
ggplot(aes(x = Year, y = waardes, fill = Fuel))+
geom_col(position = "dodge") +
labs(title = input$EUoptions, y = '')  +
scale_y_continuous(limits = c(0,65000), breaks = seq(0,65000, by= 5000)) +
scale_x_continuous(limits = c(min(countriesafinfrastructure$Year), max(countriesafinfrastructure$Year)), breaks = seq(min(countriesafinfrastructure$Year), max(countriesafinfrastructure$Year), by = 1))
}
else {
countriesinfrvar <- countriesafinfrastructure %>% filter(Fuel %in% input$EUcheckinfr, Year == input$YearEU)
countriesinfrvar %>%
ggplot(aes(x = Country, y = waardes, fill = Fuel))+
geom_col(position = "dodge") +
labs(title = input$YearEU, y = '')  +
scale_y_continuous(limits = c(0, 65000), breaks = seq(0,65000, by= 5000)) +
coord_flip()
}
})
output$distPlot <- renderPlot({
teslamap <- function(inputjaar, df) {
if (inputjaar == "2013") {
teslamap <- df %>% filter(df$jaar == inputjaar, df$waarde > 0)
}
else {
teslamap <- df %>% filter(df$jaar == c(inputjaar, (as.numeric(inputjaar) - 1)), df$waarde > 0)
}
return(teslamap)
}
teslamapvar <- teslamap(input$teslajaar, tesla.eu.map)
gg <- teslamapvar %>% ggplot() + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")
if (input$teslajaar == "2013") {
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
}
else {
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
}
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
panel.border = element_blank(),
strip.background = element_rect(fill = 'white', colour = 'white')) + scale_fill_manual( values = c("tomato", "skyblue"))
gg
})
})
runApp('Dashboard_Lien')
>>>>>>> a7f0df7bae219b8665105e5c4ff68fa66e734c16
runApp('Dashboard')
>>>>>>> 5313afa516f6b2fa29d879bcbdfeac6886b5e2d0
