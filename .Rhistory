<<<<<<< HEAD
=======
<<<<<<< HEAD
# Used as label coordinate for country's names
region.lab.data <- some.eu.maps %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat))
europe <- ggplot(some.eu.maps, aes(x = long, y = lat)) + geom_polygon(aes( group = group), color='black', fill = 'white')+
geom_text(aes(label = region), data = region.lab.data,  size = 2, hjust = 0.5)+
scale_fill_viridis_d()+
theme_void()+
theme(legend.position = "none") + coord_fixed(1.3)
print(europe)
europe + geom_point(data = superchargers, aes(x = Longitude, y = Latitude), size = 0.3, color = 'red') + coord_fixed(1.3)
getEuropePlot <- function(){
## Get the world map: ##
worldMap <- getMap()
## Define vector with all European countries: ##
v.europe <- c("Norway", "Sweden", "Finland", "Denmark", "United Kingdom","Ireland", "Greece",
"Belgium", "Netherlands", "France", "Spain", "Portugal", "Luxembourg", "Croatia",
"Germany", "Switzerland", "Austria", "Slovenia", "Italy", "Bulgaria", "Romania",
"Czech Rep.", "Slovakia", "Hungary", "Poland", "Bosnia Hercegovina", "Serbia",
"Turkey", "Ukraine", "Moldova", "Belarus", "Estonia", "Latvia", "Lithuania",
"Montenegro", "Albania", "Macedonia")
## Select only the index of countries of Europe: ##
indEU <- which(worldMap$NAME%in%v.europe)
## Extract longitude and latitude border's coordinates of countries: ##
df.europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region = as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
df.europeCoords <- do.call("rbind", df.europeCoords)
names(df.europeCoords) <- c("longitude", "latitude", "country")
## Deletes/Removes borders of PLOT: ##
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
## Plot the map: ##
p <- ggplot(data = df.europeCoords, aes(x = longitude, y = latitude, group = country,
text = paste("<b>", country, '</b>\n')),
color = "grey50", size = 0.1) +
geom_polygon() +
coord_map(xlim = c(-13, 35),  ylim = c(32, 71)) +
theme_classic() +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(), axis.title = element_blank(), legend.position = "none",
plot.margin = unit(0 * c(-1.5, -1.5, -1.5, -1.5), "lines"))
## Create plot_ly() object: ##
EuropePlot <- plotly::ggplotly(p, tooltip = "text") %>%
layout(xaxis = ax, yaxis = ax)
}
#ui <- fluidPage(
#plotlyOutput (outputId = "maPPInfoPLOT", width = "900px", height = "600px"))
#server <- function(input, output, session) {
# PLOT-Output: #
# EuropePlot <- getEuropePlot()
# output$maPPInfoPLOT <- renderPlotly({
#plotly::ggplotly(EuropePlot, dynamicTicks = TRUE)})}
#shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
summary(data)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
summary(data)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
Data %>% ggplot(aes(x = Month, y = Sales)) + geom_col() + facet_wrap(Year~.) + labs(title = "Periodic Tesla sales over the years.") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
=======
library(plotly)
library(leaflet)
>>>>>>> c7a9094e5be2c887395628b677213809b687d615
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
str(verkoop)
verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
str(verkoo)
verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
install.packages('instalr')
library(readxl)
library(tidyr)
library(plyr)
library(dplyr)
<<<<<<< HEAD
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages('RSQLite')
install.packages("RSQLite")
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
install.packages('RSQLite')
install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
=======
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
#verkoo$Sales <- as.integer(verkoo$Sales)
str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
library(readxl)
Revenue <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("text", "text", "numeric", "numeric"))
summary(Revenue)
Gross_Margin <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("text", "text", "numeric", "numeric"))
summary(Gross_Margin)
Gross_profit <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("text", "text", "numeric", "numeric", "numeric"))
summary(Gross_profit)
Free_cashflow <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("text", "text", "numeric"))
summary(Free_cashflow)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2)) + ylim(15,30)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2), expand= c(0,0) ) + ylim(15,30)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(15,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(15, 0 ,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(minor_breaks = seq(15,30, by= 2))
knitr::opts_chunk$set(echo = TRUE)
evshare_eu <- read.csv("Data/ev_share_europe.csv")
View(evshare_eu)
str(evshare_eu)
evshare_eu %>% group_by(country, time) %>% summarise(elec_percent)
library(dplyr)
library(ggplot2)
library(tidyr)
<<<<<<< HEAD
library(readr)
library(forcats)
library(lubridate)
evshare_eu %>% group_by(country, time) %>% summarise(elec_percent)
evshare_eu %>% group_by(country) %>% summarise(mean(elec_percent))
evshare_eu %>% group_by(time) %>% summarise(mean(elec_percent))
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
View(Revenue)
runApp('Dashboard_Lien')
install.packages('shinydashboard')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
?icon
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
=======
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
#verkoo$Sales <- as.integer(verkoo$Sales)
str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
<<<<<<< HEAD
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
?read_xlsx
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
=======
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
#verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales") %>%
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
<<<<<<< HEAD
=======
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales")
#str(verkoo)
#verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
<<<<<<< HEAD
install.packages('leaflet')
runApp('Dashboard_Caro')
install.packages('DT')
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
output$linerev <- renderPlot({
x    <- Revenue$Year
Yearrevline <- seq(min(x), max(x), length.out = input$Yearrevline)
totalrev <- Yearrevline + min(input)
# draw the histogram with the specified number of bins
revenue(input$Yearrevline, Revenue) %>% group_by(Year, Quarter) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
})
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
View(Revenue)
View(Revenue)
View(Revenue)
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
knitr::opts_chunk$set(echo = TRUE)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
View(Revenue)
View(jaartotaal)
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% filter(Year == c(2015, 2016,2017)) %>% mutate(totaal = sum(`1000_revenue`[Year]))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% mutate(totaal = sum(`1000_revenue`[Year]))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% mutate(totaal = sum(`Automotive Revenues Tesla`[Year]))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% mutate(totaal = sum(`Automotive Revenues Tesla`))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% mutate(totaal = sum(Year))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% filter(-Quarter)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% Select(-Quarter)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% select(-Quarter)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% select(-Quarter) %>% mutate(total = sum(`1000_revenue`))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% select(-Quarter) %>% group_by(Year) %>% mutate(total = sum(`1000_revenue`))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`Automotive Revenues`))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`1000_revenue`))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`Automotive Revenues Tesla`)/1000)
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`Automotive Revenues Tesla`)/1000) %>% select(Year, total)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`Automotive Revenues Tesla`)/1000) %>% select(Year, total)%>% distinct()
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = sum(`Automotive Revenues Tesla`,na.rm = TRUE)/1000) %>% select(Year, total)%>% distinct()
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(as.numeric(total = sum(`Automotive Revenues Tesla`,na.rm = TRUE)/1000)) %>% select(Year, total)%>% distinct()
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE)/1000)) %>% select(Year, total)%>% distinct()
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct()
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct() %>% ggplot(aes(x = Year , y = `1000_revenue`))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct() %>% ggplot(aes(x = Year , y = total))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct() %>% filter(Year == c(2015,2016,2017)) %>% ggplot(aes(x = Year , y = total))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct() %>% filter(Year = c(2015,2016,2017)) %>% ggplot(aes(x = Year , y = total))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% filter(Year = c(2015,2016,2017)) %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct()  %>% ggplot(aes(x = Year , y = total))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% filter(Year == c(2015,2016,2017)) %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct()  %>% ggplot(aes(x = Year , y = total))+ geom_line() +
labs(y = 'Automotive revenue')  +
scale_y_continuous(breaks = seq(0,8000, by= 1000))
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
?scale_y_continuous
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct()
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Revenue %>% group_by(Year) %>% mutate(total = as.numeric(sum(`Automotive Revenues Tesla`,na.rm = TRUE))) %>% select(Year, total)%>% distinct()
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
=======
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales")
#str(verkoo)
verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
str(verkoo)
verkoo <- data.frame(verkoo)
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(verkoo$Country %in% list, Year == 2019)
superchargersC <- superchargers %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
library(leaflet)
library(shinydashboard)
superchargers <- read_xlsx("Data/Superchargers.xlsx")
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.double(superchargers$Longitude)
superchargers$Latitude <- as.double(superchargers$Latitude)
superchargers$id <- seq.int(nrow(superchargers))
superchargers$Year <- format(superchargers$'Open Date', format="%Y")
superchargers <- data.frame(superchargers)
verkoo <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
verkoo$'2013' <- as.numeric(verkoo$'2013')
verkoo$'2014' <- as.numeric(verkoo$'2014')
verkoo$'2015' <- as.numeric(verkoo$'2015')
verkoo$'2016' <- as.numeric(verkoo$'2016')
verkoo$'2017' <- as.numeric(verkoo$'2017')
verkoo$'2018' <- as.numeric(verkoo$'2018')
verkoo$'2019' <- as.numeric(verkoo$'2019')
verkoo <- verkoo %>% gather('2013':'2019',key = "Year", value = "Sales")
#str(verkoo)
verkoo$Year <- as.integer(verkoo$Year)
verkoo$Sales <- as.integer(verkoo$Sales)
#str(superchargers)
#str(verkoo)
verkoo <- data.frame(verkoo)
str(verkoo)
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
superchargersC <- superchargers %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
str(superchargersC)
superchargersC <- count(superchargersC, "Country")
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
#str(superchargersC)
superchargersC <- count(superchargersC, "Country")
str(superchargersC)
ratio <- full_join(superchargersC, verkooC, by = 'Country')
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
verkooC <- verkoo %>% dplyr::filter(Country %in% list, Year == 2019)
#str(verkooC)
superchargersC <- superchargers %>% dplyr::filter(Year < 2020, Status == 'OPEN', Country %in% list)
#str(superchargersC)
superchargersC <- plyr::count(superchargersC, "Country")
str(superchargersC)
ratio <- full_join(superchargersC, verkooC, by = 'Country')
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
#x-as moet gaan van 2008-2019
VPS %>% ggplot(aes(x = Segment, y = Sales)) + geom_col() + facet_wrap(Year~.) + labs(title = "New cars sold in the EU by segment in million units for each year.") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
<<<<<<< HEAD
shiny::runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
=======
>>>>>>> 2fd6ae77da1b4fe88d19459ee7e5325ed9607b69
>>>>>>> c7a9094e5be2c887395628b677213809b687d615
