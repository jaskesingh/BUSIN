runApp('Dashboard')
<<<<<<< HEAD
<<<<<<< HEAD
shiny::runApp('Dashboard')
runApp('Dashboard')
=======
=======
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
=======
>>>>>>> 785a3b81cd8e425415066202b98b84c941276879
library(dplyr)
library(ggplot2)
>>>>>>> a1e78aac5a14cf5827ed172cc8265e110888948f
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
<<<<<<< HEAD
dbWriteTable(con, "VPS", VPS)
##Sales per fuel type
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
eu <- read_xlsx("Data/% share of new passenger cars by fuel type in the EU.xlsx")
NieuwMS <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
NieuwMS$Year <- recode(NieuwMS$Year, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars.sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
NieuwMS$Year <- as.integer(NieuwMS$Year)
NieuwMS$Market.Share <- as.double(NieuwMS$Market.Share)
TweedehandsMS <- tweedehands %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "Year", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
TweedehandsMS$Year <- recode(TweedehandsMS$Year, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Tweedehands <- tweedehands %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars.sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Tweedehands$Year <- as.integer(Tweedehands$Year)
TweedehandsMS$Year <- as.integer(TweedehandsMS$Year)
TweedehandsMS$Market.Share <- as.double(TweedehandsMS$Market.Share)
EuMS <- eu %>% gather('2016', '2017', '2018', '2019',key = "Year", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
EuMS$Year <- as.integer(EuMS$Year)
EuMS$Market.Share <- as.double(EuMS$Market.Share)
dbWriteTable(con, "Nieuw", Nieuw)
dbWriteTable(con, "NieuwMS", NieuwMS)
dbWriteTable(con, "Tweedehands", Tweedehands)
dbDisconnect(con)
=======
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = Sales - lag(Sales))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
<<<<<<< HEAD
=======
<<<<<<< HEAD
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[Year == max(Year)] - Sales[Year == min(Year)]))
VPSC2
shiny::runApp('Dashboard_Jaske')
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
<<<<<<< HEAD
=======
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
install.packages('toOrdinal')
install.packages("toOrdinal")
install.packages('toOrdinal')
install.packages("toOrdinal")
=======
>>>>>>> 9f2a9943015a3840ac6a2ab2962568a9c8ddd003
>>>>>>> 785a3b81cd8e425415066202b98b84c941276879
shiny::runApp('Dashboard')
runApp('Dashboard')
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
<<<<<<< HEAD
install.packages('toOrdinal')
install.packages("toOrdinal")
install.packages('toOrdinal')
install.packages("toOrdinal")
=======
runApp('Dashboard')
<<<<<<< HEAD
=======
runApp('Dashboard')
=======
=======
>>>>>>> 298fd560bd9a0f444a6ba4fc40a7d7f1de761adc
>>>>>>> 14648ab262cf6ba991ba07d752a6ef11dd98ef03
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
=======
runApp('Dashboard')
runApp('Dashboard')
>>>>>>> 9f2a9943015a3840ac6a2ab2962568a9c8ddd003
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
>>>>>>> 785a3b81cd8e425415066202b98b84c941276879
shiny::runApp('Dashboard')
runApp('Dashboard')
>>>>>>> a1e78aac5a14cf5827ed172cc8265e110888948f
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
=======
<<<<<<< HEAD
=======
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
=======
=======
>>>>>>> 298fd560bd9a0f444a6ba4fc40a7d7f1de761adc
>>>>>>> 14648ab262cf6ba991ba07d752a6ef11dd98ef03
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
>>>>>>> 2ece3a48bd363c130ae682307cc05399e955663a
install.packages(ggflags)
=======
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(tesla.eu.map)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
=======
>>>>>>> 785a3b81cd8e425415066202b98b84c941276879
devtools::install_github("rensa/ggflags"
)
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
devtools::install_github("rensa/ggflags")
install.packages("devtools")
devtools::install_github("rensa/ggflags")
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
runApp()
runApp()
runApp('Dashboard_Jaske')
runApp()
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
knitr::opts_chunk$set(echo = TRUE)
dbListTables(con)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(tidyverse)
# Establish connection with the database
con <- dbConnect(drv = SQLite(), "Tesla_database.sqlite")
#Growth
##Sales per segment
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
dbWriteTable(con, "VPS", VPS)
dbListTables(con)
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
shiny::runApp('Dashboard')
runApp('Dashboard')
=======
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Convert to numerics
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
str(groco_data)
View(groco_data)
groco_data$'Share In EV Market In 2018 '  <- as.numeric(groco_data$'Share In EV Market In 2018 ')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
View(groco_data)
str(groco_data)
shiny::runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
print("Hello")
<<<<<<< HEAD
shiny::runApp('Dashboard')
runApp('Dashboard')
groco_filtered_data
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
groco_data_test <- groco_data %>% select(c("Submodel", "2019")) %>%
drop_na("2019") %>%
# Drop others and segment total
drop_na("Submodel")
groco_data_test <- groco_data %>% select(c("Submodel", "Sales in 2019")) %>%
drop_na("Sales in 2019") %>%
# Drop others and segment total
drop_na("Submodel")
View(groco_data_test)
groco_data_test <- groco_data %>% select(c("Submodel", "Sales in 2019")) %>%
drop_na("Sales in 2019") %>%
# Drop others and segment total
drop_na("Submodel")
View(groco_data)
View(groco_data_test)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(groco_filtered_data)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(groco_data_gather)
groco_data_gather <- groco_data %>% gather("Sales In 2019",
"Sales In 2018",
"Change In Sales From 2018 To 2019 (%)",
"Share In EV Market In 2019",
"Share In EV Market In 2018",
"Proportion Of Sales Of This Model That Was EV In 2019 (%)",
"Proportion Of Sales Of This Model That Was EV In 2018 (%)",
"Range",
"Top Speed (km/h)",
"Acceleration (0-100 km/h)",
"Horsepower",
"Top Charging Speed (km/h)",
"Price",
"Trunk Space (Including Frunk If Applicable)",
"Segment",
"NCAP Stars",
"NCAP Adult Occupant Score (%)",
"NCAP Child Occupant Score (%)",
"NCAP Vulnerable Road Users Score (%)",
"NCAP Safety Assist Score (%)",
"NCAP Average Score (%)",
key = "Type",
value = "Value"
)
groco_data_gather$"Value" <- as.numeric(groco_data_gather$"Value")
groco_data_gather$"Type"  <- as.character(groco_data_gather$"Type")
View(groco_data_gather)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
>>>>>>> bf7d1b4da0cf63e2db6d7c851adc56530bfbdab6
<<<<<<< HEAD
shiny::runApp('Dashboard')
devtools::install_github("rensa/ggflags")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
>>>>>>> 22bf0fccb55c3b7c939a7d0edb572c8ec89379d1
<<<<<<< HEAD
shiny::runApp('Dashboard')
runApp('Dashboard')
=======
>>>>>>> 785a3b81cd8e425415066202b98b84c941276879
>>>>>>> a1e78aac5a14cf5827ed172cc8265e110888948f
>>>>>>> b4c53b0f25cf112bc44fa09c35b0e40de2273caf
>>>>>>> fc2098a772382226fb76ccc6be1ffeab9be7b2e6
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp()
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
?ggplotly
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
