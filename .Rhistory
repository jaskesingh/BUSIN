countriesafpassengercars <- read_xlsx("Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("text", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
summary(countriesafpassengercars)
countriesafinfrastructure <- countriesafinfrastructure %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'brandstof', value = 'waardes')
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'brandstof', value = 'waardes')
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2008') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2008', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 100000)) + theme(axis.text.x = element_text(angle = 45))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2008') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2008', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 45))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2008') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2008', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2009') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2009', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2010') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2010', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2011') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2011', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2012') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2012', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2013') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2014') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2014', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2015') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2015', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2016') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2016', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2017') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2017', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2018') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2018', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2019') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2019', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Year == '2020') %>% ggplot(aes(x = Country, y = waardes, fill = brandstof))+ geom_col(position = "stack") + labs(title = 'Countries overview of AF passenger cars 2020', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE', brandstof == c('BEV', 'PHEV')) %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE', brandstof == 'BEV') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE', brandstof == 'PHEV') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
brandstofev <- countriesafinfrastructure %>% select(brandstof == 'BEV', brandstof == 'PHEV')
brandstofev <- countriesafpassengercars %>% select(brandstof == 'BEV', brandstof == 'PHEV')
brandstofev <- countriesafpassengercars %>% pull(brandstof == 'BEV', brandstof == 'PHEV')
brandstofev <- countriesafpassengercars %>% pull(var = 'BEV', var = 'PHEV')
brandstofev <- countriesafpassengercars %>% pull(var = c('BEV','PHEV'))
?add_column
countriesafpassengercarsev <- countriesafpassengercars %>% mutate(EV = (BEV + PHEV))
countriesafpassengercarsev <- countriesafpassengercars %>% mutate(EV = BEV + PHEV)
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' = BEV + PHEV)
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' = 'BEV' + 'PHEV')
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' == 'BEV' + 'PHEV')
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' = 'BEV' + 'PHEV')
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' = BEV + PHEV)
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
countriesafpassengercars <- read_xlsx("Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("text", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
summary(countriesafpassengercars)
countriesafpassengercarsev <- countriesafpassengercars %>% mutate('EV' = BEV + PHEV)
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'brandstof', value = 'waardes')
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE', brandstof == 'BEV') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE', brandstof == 'PHEV') %>% ggplot(aes(x = Year, y = waardes, fill = brandstof))+ geom_col(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(Year == '2013') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2013') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2013') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2012') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2012', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2012') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2012', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2011') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2011', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2010') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2010', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2009') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2009', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2008') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2008', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,10000, by= 1000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2014') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2014', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2015') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2015', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2016') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2016', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2017') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2017', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2017') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2017', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 100000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2017') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2017', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2018') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2018', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2018') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2018', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2019') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2019', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2019') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2019', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2020') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2020', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Year == '2020') %>% ggplot(aes(x = Country, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2020', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercars %>% filter(brandstof != 'Total', Country == 'BE') %>% ggplot(aes(x = Year, y = waardes, group = brandstof, color = brandstof))+ geom_line(position = "dodge")  + labs(title = 'Countries overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Country = 'BE') %>% ggplot(aes(x = Year, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Country == 'BE') %>% ggplot(aes(x = Year, y = EV))+ geom_col() + labs(title = 'Countries overview of AF passenger cars 2013', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Country == 'BE') %>% ggplot(aes(x = Year, y = EV))+ geom_col() + labs(title = 'Overview of AF passenger cars BE', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
countriesafpassengercarsev %>% filter(Country == 'BE') %>% ggplot(aes(x = Year, y = EV))+ geom_col() + labs(title = 'Overview of AF passenger cars BE electric', subtitle = 'Total fleet of passenger cars per alternative fuel', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
RevenueTeslaEurope <- read_xlsx("revenue_tesla_europe_Statista.xlsx", skip = 3 , col_types = c("text", "numeric"))
summary(RevenueTeslaEurope)
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
library(tidyr)
RevenueTeslaEurope <- read_xlsx("revenue_tesla_europe_Statista.xlsx", skip = 3 , col_types = c("text", "numeric"))
summary(RevenueTeslaEurope)
RevenueTeslaEurope <- RevenueTeslaEurope %>% mutate('Revenue' = Total*0.8563)
RevenueTeslaEurope %>% ggplot(aes(x = Country, y = Total))+ geom_col() + labs(title = 'Mobility market outlook Tesla', subtitle = 'Europe revenue per country', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
RevenueTeslaEurope <- RevenueTeslaEurope %>% mutate('Revenue' = Total*0.8563)
RevenueTeslaEurope %>% ggplot(aes(x = Country, y = Revenue))+ geom_col() + labs(title = 'Mobility market outlook Tesla', subtitle = 'Europe revenue per country', y = '')  + scale_y_continuous(breaks = seq(0,10000000, by= 1000000)) + theme(axis.text.x = element_text(angle = 90))
RevenueTeslaEurope <- RevenueTeslaEurope %>% mutate('Revenue' = Total*0.8563)
RevenueTeslaEurope %>% ggplot(aes(x = Country, y = Revenue))+ geom_col() + labs(title = 'Mobility market outlook Tesla', subtitle = 'Europe revenue per country', y = '')  + scale_y_continuous(breaks = seq(0,100000, by= 10000)) + theme(axis.text.x = element_text(angle = 90))
RevenueTeslaEurope <- RevenueTeslaEurope %>% mutate('Revenue' = Total*0.8563)
RevenueTeslaEurope %>% ggplot(aes(x = Country, y = Revenue))+ geom_col() + labs(title = 'Mobility market outlook Tesla', subtitle = 'Europe revenue per country', y = '')  + scale_y_continuous(breaks = seq(0,1000000, by= 100000)) + theme(axis.text.x = element_text(angle = 90))
RevenueTeslaEurope %>% group_by(Revenue, Country)
?separate
RevenueTeslaEurope %>% group_by(Revenue, Country) %>% separate(Revenue, Country)
RevenueTeslaEurope %>% group_by(Revenue, Country) %>% separate(Country, Revenue)
RevenueTeslaEurope %>% group_by(Revenue, Country) %>% separate(Country)
RevenueTeslaEurope %>% group_by(Revenue, Country) %>% select(Revenue, Country)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") #x-as moet gaan van 2008-2019
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") #x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous()
#x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_discrete()
#x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(limits = c(2008, 2019))
#x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019))
#x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
#x-as moet gaan van 2008-2019
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(-1,6, by = 1))
#x-as moet gaan van 2008-2019
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
summary(data)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year))
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(maps)
install.packages('maps')
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggmap)
install.packages('ggmap')
install.packages('mapproj')
install.packages('sf')
install.packages('rnaturalearth')
install.packages('hrbrthemes')
install.packages('grid')
install.packages("grid")
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages('RSQLite')
install.packages("RSQLite")
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "xfun"))
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "xfun"))
install.packages("installr")
knitr::opts_chunk$set(echo = TRUE)
library(installr)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
install.packages(mapdata)
install.packages('mapdata')
install.packages('mapproj')
install.packages('sf')
install.packages('rnaturalearth')
install.packages('hrbrthemes')
install.packages('grid')
install.packages("grid")
install.packages('rworldmap')
install.packages('shiny')
install.packages('plotly')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(plotly)
superchargers <- read_xlsx("Superchargers.xlsx")
summary(superchargers)
superchargers <- superchargers %>% separate(GPS, sep = ",", into = c("Latitude", "Longitude"))
superchargers$Longitude <- as.integer(superchargers$Longitude)
superchargers$Latitude <- as.integer(superchargers$Latitude)
superchargers <- data.frame(superchargers)
world_data <- ggplot2::map_data('world')
world_data <- fortify(world_data)
head(world_data)
# Some EU Contries
some.eu.countries <- c("Norway", "Sweden", "Finland", "Denmark", "UK","Ireland", "Greece",
"Belgium", "Netherlands", "France", "Spain", "Portugal", "Luxembourg", "Croatia",
"Germany", "Switzerland", "Austria", "Slovenia", "Italy", "Bulgaria", "Romania",
"Czech Rep.", "Slovakia", "Hungary", "Poland", "Bosnia Hercegovina", "Serbia",
"Turkey", "Ukraine", "Moldova", "Belarus", "Estonia", "Latvia", "Lithuania",
"Montenegro", "Albania", "Macedonia", "Iceland")
# Retrievethe map data
some.eu.maps <- map_data("world", region = some.eu.countries)
# Compute the centroid as the mean longitude and lattitude
# Used as label coordinate for country's names
region.lab.data <- some.eu.maps %>%
group_by(region) %>%
summarise(long = mean(long), lat = mean(lat))
europe <- ggplot(some.eu.maps, aes(x = long, y = lat)) + geom_polygon(aes( group = group), color='black', fill = 'white')+
geom_text(aes(label = region), data = region.lab.data,  size = 2, hjust = 0.5)+
scale_fill_viridis_d()+
theme_void()+
theme(legend.position = "none") + coord_fixed(1.3)
print(europe)
europe + geom_point(data = superchargers, aes(x = Longitude, y = Latitude), size = 0.3, color = 'red') + coord_fixed(1.3)
getEuropePlot <- function(){
## Get the world map: ##
worldMap <- getMap()
## Define vector with all European countries: ##
v.europe <- c("Norway", "Sweden", "Finland", "Denmark", "United Kingdom","Ireland", "Greece",
"Belgium", "Netherlands", "France", "Spain", "Portugal", "Luxembourg", "Croatia",
"Germany", "Switzerland", "Austria", "Slovenia", "Italy", "Bulgaria", "Romania",
"Czech Rep.", "Slovakia", "Hungary", "Poland", "Bosnia Hercegovina", "Serbia",
"Turkey", "Ukraine", "Moldova", "Belarus", "Estonia", "Latvia", "Lithuania",
"Montenegro", "Albania", "Macedonia")
## Select only the index of countries of Europe: ##
indEU <- which(worldMap$NAME%in%v.europe)
## Extract longitude and latitude border's coordinates of countries: ##
df.europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region = as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
df.europeCoords <- do.call("rbind", df.europeCoords)
names(df.europeCoords) <- c("longitude", "latitude", "country")
## Deletes/Removes borders of PLOT: ##
ax <- list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
## Plot the map: ##
p <- ggplot(data = df.europeCoords, aes(x = longitude, y = latitude, group = country,
text = paste("<b>", country, '</b>\n')),
color = "grey50", size = 0.1) +
geom_polygon() +
coord_map(xlim = c(-13, 35),  ylim = c(32, 71)) +
theme_classic() +
theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks.x = element_blank(),
axis.ticks.y = element_blank(), axis.title = element_blank(), legend.position = "none",
plot.margin = unit(0 * c(-1.5, -1.5, -1.5, -1.5), "lines"))
## Create plot_ly() object: ##
EuropePlot <- plotly::ggplotly(p, tooltip = "text") %>%
layout(xaxis = ax, yaxis = ax)
}
#ui <- fluidPage(
#plotlyOutput (outputId = "maPPInfoPLOT", width = "900px", height = "600px"))
#server <- function(input, output, session) {
# PLOT-Output: #
# EuropePlot <- getEuropePlot()
# output$maPPInfoPLOT <- renderPlotly({
#plotly::ggplotly(EuropePlot, dynamicTicks = TRUE)})}
#shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
summary(data)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
summary(data)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
Data %>% ggplot(aes(x= Month, y = Sales)) + geom_line(aes(color = Year)) + scale_x_continuous(breaks = seq(0,12, by = 1))
Data %>% ggplot(aes(x = Month, y = Sales)) + geom_col() + facet_wrap(Year~.) + labs(title = "Periodic Tesla sales over the years.") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
install.packages('instalr')
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
library(stringr)
data <- read_xlsx("Monthly Tesla Vehicle Sales.xlsx")
data$January <- as.integer(data$January)
data$February <- as.integer(data$February)
data$March <- as.integer(data$March)
data$April <- as.integer(data$April)
data$May <- as.integer(data$May)
data$June <- as.integer(data$June)
data$July <- as.integer(data$July)
data$August <- as.integer(data$August)
data$September <- as.integer(data$September)
data$October <- as.integer(data$October)
data$November <- as.integer(data$November)
data$December <- as.integer(data$December)
Data <- data %>% gather(January:December, key=  "Month", value="Sales") %>% mutate(Month = str_replace(Month, "January", "1"), Month = str_replace(Month, "February", "2"), Month = str_replace(Month, "March", "3"), Month = str_replace(Month, "April", "4"), Month = str_replace(Month, "May", "5"), Month = str_replace(Month, "June", "6"), Month = str_replace(Month, "July", "7"), Month = str_replace(Month, "August", "8"), Month = str_replace(Month, "September", "9"), Month = str_replace(Month, "October", "10"), Month = str_replace(Month, "November", "11"), Month = str_replace(Month, "December", "12"))
Data$Month <- as.integer(Data$Month)
structure(Data)
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages(c("data.table", "digest", "generics", "R6", "rmarkdown", "testthat", "tinytex", "xfun"))
install.packages('RSQLite')
install.packages("RSQLite")
install.packages('RSQLite')
install.packages("RSQLite")
install.packages("RSQLite")
install.packages('RSQLite')
install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(readxl)
Revenue <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("text", "text", "numeric", "numeric"))
summary(Revenue)
Gross_Margin <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("text", "text", "numeric", "numeric"))
summary(Gross_Margin)
Gross_profit <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("text", "text", "numeric", "numeric", "numeric"))
summary(Gross_profit)
Free_cashflow <- read_xlsx("C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("text", "text", "numeric"))
summary(Free_cashflow)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2)) + ylim(15,30)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2), expand= c(0,0) ) + ylim(15,30)
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(0,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(15,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(breaks = seq(15, 0 ,30, by= 2))
Gross_Margin %>% ggplot(aes(x = Year, y = `Gross margin Automotive GAAP`, fill= Quarter)) + geom_col(position="dodge") + labs(title = 'Yearly gross margin for automotive GAAP', subtitle = 'Per quarter and in %', y= 'Gross margin') + scale_y_continuous(minor_breaks = seq(15,30, by= 2))
knitr::opts_chunk$set(echo = TRUE)
evshare_eu <- read.csv("Data/ev_share_europe.csv")
View(evshare_eu)
str(evshare_eu)
evshare_eu %>% group_by(country, time) %>% summarise(elec_percent)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
evshare_eu %>% group_by(country, time) %>% summarise(elec_percent)
evshare_eu %>% group_by(country) %>% summarise(mean(elec_percent))
evshare_eu %>% group_by(time) %>% summarise(mean(elec_percent))
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
View(Revenue)
runApp('Dashboard_Lien')
install.packages('shinydashboard')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
?icon
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
