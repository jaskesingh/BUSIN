hev <- hev %>% select(-Car_sharing_)
hev1 <- hev %>% mutate(Gender = as.factor(Gender),
Education_level = as.factor(Education_level),
Employment_status = as.factor(Employment_status),
Income_group = as.factor(Income_group),
Country = as.factor(Country),
buy_electric = as.logical(buy_electric),
Household_members_number = as.factor(Household_members_number),
Plan_to_purchase_vehicle = as.factor(Plan_to_purchase_vehicle))
levels(hev1$Gender) <- c("M", "F")
levels(hev1$Country) <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain",
"Sweden", "Great Britain", "Malta", "Luxembourg", "Cyprus")
levels(hev1$Education_level) <- c("Primary (elementary school)",
"Lower secondary (upper elementary school)",
"Upper secondary (high school)",
"Tertiary and higher (University degree or PhD)")
levels(hev1$Employment_status) <- c("Full time employed", "Part time employed", "Unemployed",
"Studying", "Retired", "Other", "I prefer not to answer")
levels(hev1$Household_members_number) <- c("one (myself)", "two", "three", "four", "five",
"more than five", "I prefer not to answer")
levels(hev1$Plan_to_purchase_vehicle) <- c("Yes, in the next 6 months",
"Yes, in the next 12 months",
"Yes, in the next 2 years", "No",
"Don’t know/no answer")
levels(hev1$Income_group) <- c("high", "higher middle", "middle", "lower middle", "low",
"I prefer not to answer")
teslacountries <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Slovenia", "Spain", "Sweden", "Switzerland")
hev1$tesla_sold <- ifelse(hev1$Country %in% teslacountries, 1, 0)
hev1 %>% mutate(tesla_sold as.logical(tesla_sold))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
hev <- read.csv2("Data/HEV_article_2018_filtered.csv")
View(hev)
str(hev)
hev <- hev %>% select(-Car_sharing_)
hev1 <- hev %>% mutate(Gender = as.factor(Gender),
Education_level = as.factor(Education_level),
Employment_status = as.factor(Employment_status),
Income_group = as.factor(Income_group),
Country = as.factor(Country),
buy_electric = as.logical(buy_electric),
Household_members_number = as.factor(Household_members_number),
Plan_to_purchase_vehicle = as.factor(Plan_to_purchase_vehicle))
levels(hev1$Gender) <- c("M", "F")
levels(hev1$Country) <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain",
"Sweden", "Great Britain", "Malta", "Luxembourg", "Cyprus")
levels(hev1$Education_level) <- c("Primary (elementary school)",
"Lower secondary (upper elementary school)",
"Upper secondary (high school)",
"Tertiary and higher (University degree or PhD)")
levels(hev1$Employment_status) <- c("Full time employed", "Part time employed", "Unemployed",
"Studying", "Retired", "Other", "I prefer not to answer")
levels(hev1$Household_members_number) <- c("one (myself)", "two", "three", "four", "five",
"more than five", "I prefer not to answer")
levels(hev1$Plan_to_purchase_vehicle) <- c("Yes, in the next 6 months",
"Yes, in the next 12 months",
"Yes, in the next 2 years", "No",
"Don’t know/no answer")
levels(hev1$Income_group) <- c("high", "higher middle", "middle", "lower middle", "low",
"I prefer not to answer")
teslacountries <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Slovenia", "Spain", "Sweden", "Switzerland")
hev1$tesla_sold <- ifelse(hev1$Country %in% teslacountries, 1, 0)
hev1 %>% mutate(tesla_sold = as.logical(tesla_sold))
str(hev1)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(readr)
library(forcats)
library(lubridate)
hev <- read.csv2("Data/HEV_article_2018_filtered.csv")
View(hev)
str(hev)
hev <- hev %>% select(-Car_sharing_)
hev1 <- hev %>% mutate(Gender = as.factor(Gender),
Education_level = as.factor(Education_level),
Employment_status = as.factor(Employment_status),
Income_group = as.factor(Income_group),
Country = as.factor(Country),
buy_electric = as.logical(buy_electric),
Household_members_number = as.factor(Household_members_number),
Plan_to_purchase_vehicle = as.factor(Plan_to_purchase_vehicle))
levels(hev1$Gender) <- c("M", "F")
levels(hev1$Country) <- c("Austria", "Belgium", "Bulgaria", "Croatia", "Czech Republic",
"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain",
"Sweden", "Great Britain", "Malta", "Luxembourg", "Cyprus")
levels(hev1$Education_level) <- c("Primary (elementary school)",
"Lower secondary (upper elementary school)",
"Upper secondary (high school)",
"Tertiary and higher (University degree or PhD)")
levels(hev1$Employment_status) <- c("Full time employed", "Part time employed", "Unemployed",
"Studying", "Retired", "Other", "I prefer not to answer")
levels(hev1$Household_members_number) <- c("one (myself)", "two", "three", "four", "five",
"more than five", "I prefer not to answer")
levels(hev1$Plan_to_purchase_vehicle) <- c("Yes, in the next 6 months",
"Yes, in the next 12 months",
"Yes, in the next 2 years", "No",
"Don’t know/no answer")
levels(hev1$Income_group) <- c("high", "higher middle", "middle", "lower middle", "low",
"I prefer not to answer")
teslacountries <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Slovenia", "Spain", "Sweden", "Switzerland")
hev1$tesla_sold <- ifelse(hev1$Country %in% teslacountries, 1, 0)
hev1 <- hev1 %>% mutate(tesla_sold = as.logical(tesla_sold))
str(hev1)
hev1 %>% summary()
hev1 %>% ggplot(aes(Age)) + geom_bar(aes(fill = buy_electric), position = "fill")
hev1 %>% ggplot(aes(Gender)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% ggplot(aes(Income_group)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% filter(Country == "Belgium") %>% group_by(Country, Gender, buy_electric) %>% summarise(n = n(), median(Age)) %>% arrange(desc(n))
levels(hev1$Income_group)
hev1 %>% filter(Country == 'Belgium') %>%
ggplot(aes(Gender)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) + labs(y = "Number of respondents", fill = "Buy EV")
p1 <- hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000)) +
labs(y = "Number of respondents", fill = "Buy EV") + theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplotly(p1)
hev1 %>% filter(Country == "Austria") %>% ggplot(aes(Plan_to_purchase_vehicle)) + geom_bar(aes(fill = buy_electric), position = "dodge") + labs(y = "Number of respondents", x = "Plan to buy car", fill = "Buy EV") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = hevtesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(fill = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(fill = tesla_sold) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(color = tesla_sold) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(color = hev1$tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop, color = tesla_sold)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
str(hev1)
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(colour = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
View(hev1)
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point(aes(fill = tesla_sold)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + geom_point() + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + geom_point(aes(color = tesla_sold))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + geom_point()
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries")  + geom_point()
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", legend = "Tesla sold in country") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla sold in country") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color(tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold) +
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
?color
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold), color = "red") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color(tesla_sold))) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_brewer(palette = "PuOr")
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_manual(c("black", "red"))
hev1 %>% group_by(Country, tesla_sold) %>% summarize(n=n(),prop=sum(buy_electric==1)/n()) %>%
ggplot(aes(Country, prop)) + labs(y = "Percentage of people willing to buy ev", x = "Countries", color = "Tesla's sold") + geom_point(aes(color = tesla_sold)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) + scale_color_manual(values=c("black", "red"))
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
=======
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- ggplot(tesla.eu.map) + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")+ coord_map(ylim = c(30, 71))
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(legend.position = "none") + theme_minimal()
gg
#geom_polygon(aes( group = group, fill = jaar))+
#geom_text(aes(label = region), data = region.lab.data,  size = 3, hjust = 0.5)+
#scale_fill_viridis_d() +
#theme_void()+
#theme(legend.position = "none")
library(ggplot2)
library(dplyr)
require(maps)
require(viridis)
theme_set(
theme_void()
)
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
gg <- ggplot(tesla.eu.map) + geom_map(dat = tesla.eu.map, map = tesla.eu.map, aes(map_id = region), fill = "white", color="black")+ coord_map(ylim = c(35, 71))
gg <- gg + geom_map(map = tesla.eu.map, aes(map_id = region, fill = jaar), colour = "black")
gg <- gg + expand_limits(x = tesla.eu.map$long, y = tesla.eu.map$lat)
gg <- gg + theme(legend.position = "none") + theme_minimal()
gg
#geom_polygon(aes( group = group, fill = jaar))+
#geom_text(aes(label = region), data = region.lab.data,  size = 3, hjust = 0.5)+
#scale_fill_viridis_d() +
#theme_void()+
#theme(legend.position = "none")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Customers: loyalty
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v2.xlsx", skip = 2)
runApp('Dashboard')
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
# Set theme
theme_set(theme_minimal())
# Create plot
loyalty_per_brand_plot <- ggplot(loyalty_per_brand_tibble,
aes(x = Percentage,
y = Brand)) +
geom_bar(stat = "identity",
fill = "tomato3") +
theme(axis.text.y = element_text(vjust=0.6))
# Te doen:
# - Tesla in andere kleur (Puurder rood, rest mss in zachter rood, om toch in stijl te blijven)
# - Percentages ipv. 0.6 enzo
# - Percentages schaal tot 100%
# - (Optioneel) Namen brands groter
# - Ggplotly zodat je precieze percentage ook ziet. Dan kan mogelijk checkbox zelfs weg.(Want wil ...
#   ... kunnen filteren op luxury/mass market of beiden). Mss voegt plotly ook toe dat merken kan ...
#   ... kiezen, anders eventueel zelf toevoegen
# Print plot
loyalty_per_brand_plot
})
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
# Set theme
theme_set(theme_minimal())
# Create plot
loyalty_per_brand_plot <- ggplot(loyalty_per_brand_tibble,
aes(x = Percentage,
y = Brand)) +
geom_bar(stat = "identity",
fill = "tomato3") +
theme(axis.text.y = element_text(vjust=0.6))
# Te doen:
# - Tesla in andere kleur (Puurder rood, rest mss in zachter rood, om toch in stijl te blijven)
# - Percentages ipv. 0.6 enzo
# - Percentages schaal tot 100%
# - (Optioneel) Namen brands groter
# - Ggplotly zodat je precieze percentage ook ziet. Dan kan mogelijk checkbox zelfs weg.(Want wil ...
#   ... kunnen filteren op luxury/mass market of beiden). Mss voegt plotly ook toe dat merken kan ...
#   ... kiezen, anders eventueel zelf toevoegen
# Print plot
loyalty_per_brand_plot
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Pieter
#Customers: loyalty
loyalty_per_brand_data <- read_xlsx("Data/loyalty_per_brand_v2.xlsx", skip = 2)
# Make tibble (already was, just to be sure)
loyalty_per_brand_tibble = as_tibble(loyalty_per_brand_data)
# Change to numeric (already was, but just to be sure)
loyalty_per_brand_tibble$Percentage <- as.numeric(loyalty_per_brand_tibble$Percentage)
#Percentages gemaakt, maar dan wordt kolomtype character. Daarna naar numeric werkt ook niet.
# loyalty_per_brand_tibble$Percentage <- percent(x = loyalty_per_brand_tibble$Percentage, scale = 100, accuracy = 0.1)
# loyalty_per_brand_tibble
# Clean names
colnames(loyalty_per_brand_tibble) <- c("Ranking", "Brand", "Percentage", "Classification")
# Reverse order (high to low)
loyalty_per_brand_tibble <- loyalty_per_brand_tibble[order(loyalty_per_brand_tibble$Percentage), ]
# To retain the order in the plot
loyalty_per_brand_tibble$Brand <- factor(loyalty_per_brand_tibble$Brand,
levels = loyalty_per_brand_tibble$Brand)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
getwd()
getwd()
runApp('Dashboard_Jaske')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
#Lien
#financiele cijfers
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_Margin <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross margin", col_types = c("numeric", "text", "numeric", "numeric"))
Gross_profit <- read_xlsx("Data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Gross profit", col_types = c("numeric", "text", "numeric", "numeric", "numeric"))
Free_cashflow <- read_xlsx("Data/Tesla's free cash flow by quarter 2020 world wide.xlsx", skip = 3 , sheet = "Data", col_types = c("numeric", "text", "numeric"))
#uitbreiding europa
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
#financiele cijfers, functies
revenue <- function(yearinput,df) {
revenue <- df %>% filter(df$Year == yearinput)
return(revenue)
}
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
View(countriesafpassengercars)
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
order(countriesafpassengercars$Year, countriesafpassengercars$waardes)
countriesafpassengercars[order(countriesafpassengercars$Year, countriesafpassengercars$waardes)]
countriesafpassengercars <- order(countriesafpassengercars$Year, countriesafpassengercars$waardes)
countriesafpassengercars$Country <- factor(countriesafpassengercars$Country,
levels = countriesafpassengercars$Country)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Jaske')
<<<<<<< HEAD
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
sessionInfo()
RStudio.Version()
sudo gdebi <rstudio-server-package.deb>
sudo gdebi <rstudio-server-package.deb>
sudo yum install --nogpgcheck <rstudio-server-package.rpm>
runApp('Dashboard')
sessionInfo()
installr:install.packages("installr")
install.packages("installr")
library(installr)
updateR()
sessionInfo()
=======
getwd()
getwd()
runApp('Dashboard_Jaske')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(readr)
library(plotly)
library(DT)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
sessionInfo()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
>>>>>>> d65ccaee402a9f9fbc60089d4dadf805ce12194b
>>>>>>> fd680d8a799fa2a44bce89346f72d8174e72e26e
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
view(Financial_numbers_gather_som)
View(Financial_numbers_gather_som)
View(Financial_numbers_gather_som)
runApp('Dashboard')
