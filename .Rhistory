l <- l %>% colSums(dims = 1,4)
l <- Nieuw %>% filter(Year == 2019, Market.Share < 0.01)
l <- l %>% colSums(dims = 3,4)
l <- Nieuw %>% filter(Year == 2019, Market.Share < 0.01)
l <- l %>% select('Cars sold', Market.Share) %>% colSums(dims = 1,2)
l
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp()
runApp('Dashboard')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(Nieuw$Market.Share)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- as.integer(Nieuw$Year)
Nieuw$Market.Share <- as.double(Nieuw$Market.Share)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
View(Nieuw)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$MSYear <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
View(ionity)
View(laadpalen)
knitr::opts_chunk$set(echo = TRUE)
laadpalen %>% group_by(Country) %>% mutate(Most = freq[Description == "IONITY High Power Charging"] < freq[Description == "Tesla"])
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
laadpalen %>% spread(key = Description, value = freq)
Most <- laadpalen %>% spread(key = Description, value = freq)
Most %>% mutate(most = Tesla > `IONITY High Power Charging`)
laadpalen %>% spread(key = Description, value = freq) %>% mutate(most = Tesla > `IONITY High Power Charging`)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
install.packages("gghighlight")
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
View(Data)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
install.packages("ggExtra")
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(rvest)
snellaadpalen <- read_xlsx("Data/Superchargers.xlsx")
verkoop <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
str(snellaadpalen)
verkoop$'2013' <- as.integer(verkoop$'2013')
verkoop$'2014' <- as.integer(verkoop$'2014')
verkoop$'2015' <- as.integer(verkoop$'2015')
verkoop$'2016' <- as.integer(verkoop$'2016')
verkoop$'2017' <- as.integer(verkoop$'2017')
verkoop$'2018' <- as.integer(verkoop$'2018')
verkoop$'2019' <- as.integer(verkoop$'2019')
verkoop <- verkoop %>% select('Country', '2019')
snellaadpalen$Year <- format(snellaadpalen$'Open Date', format="%Y")
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
snellaadpalen <- snellaadpalen %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
snellaadpalen <- count(snellaadpalen, "Country")
ratio <- full_join(snellaadpalen, verkoop, by = 'Country')
View(ratio)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
install.packages("toOrdinal")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 || Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = Sales - lag(Sales))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
devtools::install_github("rensa/ggflags"
runApp('Dashboard')
runApp('Dashboard')
devtools::install_github("rensa/ggflags"
)
devtools::install_github("rensa/ggflags")
devtools::install_github('vincentarelbundock/countrycode')
install.packages("devtools")
devtools::install_github("rensa/ggflags")
devtools::install_github("rensa/ggflags")
library(RSQLite)
runApp('Dashboard')
runApp('Dashboard')
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Convert to numerics
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
str(groco_data)
View(groco_data)
groco_data$'Share In EV Market In 2018 '  <- as.numeric(groco_data$'Share In EV Market In 2018 ')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
View(groco_data)
str(groco_data)
shiny::runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
print("Hello")
shiny::runApp('Dashboard')
runApp('Dashboard')
groco_filtered_data
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
groco_data_test <- groco_data %>% select(c("Submodel", "2019")) %>%
drop_na("2019") %>%
# Drop others and segment total
drop_na("Submodel")
groco_data_test <- groco_data %>% select(c("Submodel", "Sales in 2019")) %>%
drop_na("Sales in 2019") %>%
# Drop others and segment total
drop_na("Submodel")
View(groco_data_test)
groco_data_test <- groco_data %>% select(c("Submodel", "Sales in 2019")) %>%
drop_na("Sales in 2019") %>%
# Drop others and segment total
drop_na("Submodel")
View(groco_data)
View(groco_data_test)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(groco_filtered_data)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(groco_data_gather)
groco_data_gather <- groco_data %>% gather("Sales In 2019",
"Sales In 2018",
"Change In Sales From 2018 To 2019 (%)",
"Share In EV Market In 2019",
"Share In EV Market In 2018",
"Proportion Of Sales Of This Model That Was EV In 2019 (%)",
"Proportion Of Sales Of This Model That Was EV In 2018 (%)",
"Range",
"Top Speed (km/h)",
"Acceleration (0-100 km/h)",
"Horsepower",
"Top Charging Speed (km/h)",
"Price",
"Trunk Space (Including Frunk If Applicable)",
"Segment",
"NCAP Stars",
"NCAP Adult Occupant Score (%)",
"NCAP Child Occupant Score (%)",
"NCAP Vulnerable Road Users Score (%)",
"NCAP Safety Assist Score (%)",
"NCAP Average Score (%)",
key = "Type",
value = "Value"
)
groco_data_gather$"Value" <- as.numeric(groco_data_gather$"Value")
groco_data_gather$"Type"  <- as.character(groco_data_gather$"Type")
View(groco_data_gather)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
