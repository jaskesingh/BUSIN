library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$Year <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
View(Nieuw)
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
library(readxl)
library(maps)
library(ggplot2)
library(tidyr)
library(plyr)
library(dplyr)
library(lubridate)
nieuw <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Nieuw")
tweedehands <- read_xlsx("Data/Verkoop per brandstof (België) met market share.xlsx", sheet = "Tweedehands")
Nieuw <- nieuw %>% gather(MS12, MS13, MS14, MS15, MS16, MS17, MS18, MS19,key = "MSYear", value = "Market.Share",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
Nieuw$MSYear <- recode(Nieuw$MSYear, MS12 = "2012", MS13 = "2013", MS14 = "2014", MS15 = "2015", MS16 = "2016", MS17 = "2017", MS18 = "2018", MS19 = "2019" )
Nieuw <- nieuw %>% gather('2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', key = "Year", value = "Cars sold",na.rm = FALSE, convert = FALSE, factor_key = FALSE)
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
View(ionity)
View(laadpalen)
knitr::opts_chunk$set(echo = TRUE)
laadpalen %>% group_by(Country) %>% mutate(Most = freq[Description == "IONITY High Power Charging"] < freq[Description == "Tesla"])
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
laadpalen %>% spread(key = Description, value = freq)
Most <- laadpalen %>% spread(key = Description, value = freq)
Most %>% mutate(most = Tesla > `IONITY High Power Charging`)
laadpalen %>% spread(key = Description, value = freq) %>% mutate(most = Tesla > `IONITY High Power Charging`)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
install.packages("gghighlight")
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
View(Data)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
install.packages("ggExtra")
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(rvest)
snellaadpalen <- read_xlsx("Data/Superchargers.xlsx")
verkoop <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
str(snellaadpalen)
verkoop$'2013' <- as.integer(verkoop$'2013')
verkoop$'2014' <- as.integer(verkoop$'2014')
verkoop$'2015' <- as.integer(verkoop$'2015')
verkoop$'2016' <- as.integer(verkoop$'2016')
verkoop$'2017' <- as.integer(verkoop$'2017')
verkoop$'2018' <- as.integer(verkoop$'2018')
verkoop$'2019' <- as.integer(verkoop$'2019')
verkoop <- verkoop %>% select('Country', '2019')
snellaadpalen$Year <- format(snellaadpalen$'Open Date', format="%Y")
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
snellaadpalen <- snellaadpalen %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
snellaadpalen <- count(snellaadpalen, "Country")
ratio <- full_join(snellaadpalen, verkoop, by = 'Country')
View(ratio)
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
install.packages("toOrdinal")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 || Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = Sales - lag(Sales))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[Year == max(Year)] - Sales[Year == min(Year)]))
VPSC2
shiny::runApp('Dashboard_Jaske')
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
knitr::opts_chunk$set(echo = TRUE)
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
library(readxl)
library(shinydashboard)
library(maps)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggmap)
library(mapdata)
library(mapproj)
library(sf)
library(rnaturalearth)
library(hrbrthemes)
library(grid)
library(rworldmap)
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
library(DT)
library(rvest)
library(stringr)
library(tidyverse)
library(gghighlight)
library(scales)
library(ggExtra)
library(toOrdinal)
library(tidyquant)
library(quantmod)
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- countriesafinfrastructure %>% mutate("Electricity\n(BEV + PHEV)" = Electricity,  "Natural Gas\n(CNG + LNG)" = `Natural Gas`)
countriesafinfrastructure <- countriesafinfrastructure %>% select("Year", "Country", "Electricity\n(BEV + PHEV)", "H2", "Natural Gas\n(CNG + LNG)", "LPG", "Total")
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity\n(BEV + PHEV)', 'H2', 'Natural Gas\n(CNG + LNG)', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar)) %>% select(Year, region)
View(tesla.eu.map)
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- countriesafinfrastructure %>% mutate("Electricity\n(BEV + PHEV)" = Electricity,  "Natural Gas\n(CNG + LNG)" = `Natural Gas`)
countriesafinfrastructure <- countriesafinfrastructure %>% select("Year", "Country", "Electricity\n(BEV + PHEV)", "H2", "Natural Gas\n(CNG + LNG)", "LPG", "Total")
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity\n(BEV + PHEV)', 'H2', 'Natural Gas\n(CNG + LNG)', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% rowwise() %>% summarise(Year = min(jaar)) %>% select(Year, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% rowwise() %>% summarise(Year = min(jaar)) %>% select(Year, region) %>% distinct()
countriesafpassengercars <- read_xlsx("Data/Countries overview of af passenger cars.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- read_xlsx("Data/countries overview of af infrastructure.xlsx", skip = 2 , col_types = c("numeric", "text", "numeric", "numeric", "numeric", "numeric", "numeric"))
countriesafinfrastructure <- countriesafinfrastructure %>% mutate("Electricity\n(BEV + PHEV)" = Electricity,  "Natural Gas\n(CNG + LNG)" = `Natural Gas`)
countriesafinfrastructure <- countriesafinfrastructure %>% select("Year", "Country", "Electricity\n(BEV + PHEV)", "H2", "Natural Gas\n(CNG + LNG)", "LPG", "Total")
#uitbreiding europa, data in juiste vorm krijgen
countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity\n(BEV + PHEV)', 'H2', 'Natural Gas\n(CNG + LNG)', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
'Spain', 'Sweden')
#wereldkaart
teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
some.eu.map <- map_data("world", region = some.eu.countries)
tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
tesla.eu.map %>% filter(jaar <= 2018) %>% rowwise() %>% group_by(region) %>% summarise(Year = min(jaar)) %>% select(Year, region) %>% distinct()
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% apply(1, FUN=min) %>% select(Year, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% apply(1, FUN=min) #%>% select(Year, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar)) %>% select(Year, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% rowwise() %>% summarise(Year = min(jaar)) %>% select(Year, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% mutate(Min = min(jaar)) %>% select(Min, region)
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% mutate(Min = min(jaar)) %>% select(Min, region) %>% distinct()
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% mutate(Min = min(jaar))
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar)) %>% select(Year, region)
x = c("AUstria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy")
tesla.eu.map %>% filter(jaar <= 2018 & region %in% x) %>% group_by(region) %>% mutate(Min = min(jaar))
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar))
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar, na.rm = T))
tesla.eu.map %>% filter(jaar <= 2018) %>% dplyr::group_by(region) %>% dplyr::summarise(Year = min(jaar, na.rm = T))
tesla.eu.map %>% filter(jaar <= 2018) %>% dplyr::group_by(region) %>% dplyr::summarise(Year = dplyr::min(jaar, na.rm = T))
tesla.eu.map %>% filter(jaar <= 2018) %>% dplyr::group_by(region) %>% dplyr::summarise(Year = min(jaar, na.rm = T))
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar[waarde >= 1], na.rm = T))
tesla.eu.map %>% filter(jaar <= 2018) %>% group_by(region) %>% summarise(Year = min(jaar[waarde >= 1], na.rm = F))
tesla.eu.map %>% filter(jaar <= 2018 & waarde >= 1) %>% group_by(region) %>% summarise(Year = min(jaar, na.rm = T))
shiny::runApp('Dashboard')
runApp('Dashboard')
install.packages("ggflags")
install.packages("ggflags")
devtools::install_github("rensa/ggflags")
devtools::install_github("rensa/ggflags")
runApp('Dashboard')
runApp('Dashboard')
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(rvest)
snellaadpalen <- read_xlsx("Data/Superchargers.xlsx")
verkoop <- read_xlsx("Data/Yearly Tesla Sales Country Split (Europe).xlsx")
str(snellaadpalen)
verkoop$'2013' <- as.integer(verkoop$'2013')
verkoop$'2014' <- as.integer(verkoop$'2014')
verkoop$'2015' <- as.integer(verkoop$'2015')
verkoop$'2016' <- as.integer(verkoop$'2016')
verkoop$'2017' <- as.integer(verkoop$'2017')
verkoop$'2018' <- as.integer(verkoop$'2018')
verkoop$'2019' <- as.integer(verkoop$'2019')
verkoop <- verkoop %>% select('Country', '2019')
snellaadpalen$Year <- format(snellaadpalen$'Open Date', format="%Y")
list <- c("Austria", "Belgium", "Czech Republic", "Denmark", "Finland", "France", "Germany", "Greece", "Ireland", "Italy", "Luxembourg", "Netherlands", "Norway", "Portugal", "Romania", "Slovenia", "Spain", "Sweden", "Switzerland")
snellaadpalen <- snellaadpalen %>% filter(Year < 2020, Status == 'OPEN', Country %in% list)
snellaadpalen <- count(snellaadpalen, "Country")
ratio <- full_join(snellaadpalen, verkoop, by = 'Country')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
