"Denmark", "Estonia", "Finland", "France", "Germany", "Greece",
"Hungary", "Ireland", "Italy", "Latvia", "Lithuania", "Netherlands",
"Poland", "Portugal", "Romania", "Slovakia", "Slovenia", "Spain",
"Sweden", "Great Britain", "Malta", "Luxembourg", "Cyprus")
levels(hev1$Education_level) <- c("Primary (elementary school)",
"Lower secondary (upper elementary school)",
"Upper secondary (high school)",
"Tertiary and higher (University degree or PhD)")
levels(hev1$Employment_status) <- c("Full time employed", "Part time employed", "Unemployed",
"Studying", "Retired", "Other", "I prefer not to answer")
levels(hev1$Household_members_number) <- c("one (myself)", "two", "three", "four", "five",
"more than five", "I prefer not to answer")
levels(hev1$Plan_to_purchase_vehicle) <- c("Yes, in the next 6 months",
"Yes, in the next 12 months",
"Yes, in the next 2 years", "No",
"Donâ€™t know/no answer")
levels(hev1$Income_group) <- c("high", "higher middle", "middle", "lower middle", "low",
"I prefer not to answer")
hev1 %>% summary()
hev1 %>% ggplot(aes(Age)) + geom_bar(aes(fill = buy_electric), position = "fill")
hev1 %>% ggplot(aes(Gender)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% ggplot(aes(Income_group)) + geom_bar(aes(fill = buy_electric), position = "dodge")
hev1 %>% filter(Country == "Belgium") %>% group_by(Country, Gender, buy_electric) %>% summarise(n = n(), median(Age)) %>% arrange(desc(n))
levels(hev1$Income_group)
View(hev1)
View(hev1)
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
<<<<<<< HEAD
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
install.packages('rgdal')
knitr::opts_chunk$set(echo = TRUE)
library(rgdal)
library(dplyr)
# Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence\Project/world_shape_file.zip")
# Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file.zip")
# You now have it in your current working directory, have a look!
# Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
system("unzip DATA/world_shape_file.zip")
#  -- > You now have 4 files. One of these files is a .shp file! (TM_WORLD_BORDERS_SIMPL-0.3.shp)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= paste0(getwd(),"/DATA/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= paste0(getwd(),"C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= paste0(getwd(),"/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= paste0(getwd(),"/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- read(
dsn= "/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "/Unief 2/1e Master/Business intelligence/Project/world_shape_file/" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file.zip")
# You now have it in your current working directory, have a look!
# Unzip this file. You can do it with R (as below), or clicking on the object you downloaded.
system("unzip DATA/world_shape_file.zip")
#  -- > You now have 4 files. One of these files is a .shp file! (TM_WORLD_BORDERS_SIMPL-0.3.shp)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= "C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/" ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
world_spdf <- readOGR(
dsn= paste0(getwd(),"/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
# Read this shape file with the rgdal library.
library(raster)
world_spdf <- shapefile("/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp") ,
# Read this shape file with the rgdal library.
library(raster)
world_spdf <- shapefile("/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp")
# Read this shape file with the rgdal library.
library(raster)
world_spdf <- shapefile("/C:/Users/Lien/Documents/Unief 2/1e Master/Business intelligence/Project/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3")
runApp('Dashboard_Lien')
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
=======
runApp('Dashboard_Jaske')
View(hev1)
hev1 %>% ggplot(aes(Education_level)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Education_level)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000))
hev1 %>% ggplot(aes(Employment_status)) +
geom_bar(aes(fill = buy_electric), position = "dodge") +
scale_y_continuous(limits = c(0, 6000))
shiny::runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp()
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
>>>>>>> 088df20e0780f8d0877a0fda6189fda4e55023b3
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
View(Gross_profit)
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
shiny::runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Lien')
shiny::runApp('Dashboard_Lien')
knitr::opts_chunk$set(echo = TRUE)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
somjaren <- c(sum(Revenue$`1000_revenue`[Revenue$Year == min(input$Yearrevline)], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == max(input$Yearrevline)], na.rm = TRUE))
somjaren <- c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020], na.rm = TRUE))
somjaren <- c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020], na.rm = TRUE))
somjaren
somjaren <- c(sum(Revenue$2015, na.rm = TRUE):
somjaren <- c(sum(Revenue$Year[Year == 2015], na.rm = TRUE):
sum(Revenue$Year[Year == 2020], na.rm = TRUE))
somjaren <- c(sum(Revenue[Year == 2015], na.rm = TRUE):
sum(Revenue[Year == 2020], na.rm = TRUE))
somjaren <- c(sum(Revenue$Year == 2015, na.rm = TRUE):
sum(Revenue$Year == 2020, na.rm = TRUE))
somjaren
somjaren <- c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020], na.rm = TRUE))
somjaren
somjaren <- Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
somjaren <- sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
somjaren
somjaren <- sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
somjaren
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
}
}
somjaren <- sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
somjaren
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
}
return(a)
}
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
}
return(a)
}
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
}
return(a)
}
print(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
return(a)
}
print(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
val <- val + 1
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year%>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
val <- val + 1
}
}
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year)%>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
val <- val + 1
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year,`1000_revenue`)%>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
val <- val + 1
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
val <- val + 1
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
val <- val + 1
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + Revenue$`1000_revenue`[Revenue$Year == val]
print(a)
print(val)
}
val <- val + 1
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + as.numeric(Revenue$`1000_revenue`[Revenue$Year == val])
print(a)
print(val)
}
val <- val + 1
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue$Year) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`, na.rm = TRUE)
print(a)
print(val)
}
val <- val + 1
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
Revenue %>% filter(Year == val)
a <- a + sum(Revenue$`1000_revenue`, na.rm = TRUE)
print(a)
print(val)
}
}
return(a)
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
Revenue %>% filter(Year == val)
a <- a + sum(Revenue$`1000_revenue`, na.rm = TRUE)
print(a)
print(val)
}
}
for (x in a) {
b <- b + a[x]
}
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
Revenue %>% filter(Year == val)
a <- a + sum(Revenue$`1000_revenue`, na.rm = TRUE)
print(a)
print(val)
}
}
for (x in count(a)) {
b <- b + a[x]
}
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
val = min(Revenue$Year)
a = 0
for(val in Revenue %>% select(Year) %>% distinct()) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
for(val in count(Revenue$Year)) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in count(b)) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == value], na.rm = TRUE)
print(a)
print(val)
}
}
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
}
runApp('Dashboard_Lien')
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == input$Yearrev], na.rm = TRUE)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
runApp('Dashboard_Lien')
val = min(Revenue$Year)
a = 0
b <- Revenue %>% select(Year) %>% distinct()
for(val in b) {
if (val <= max(Revenue$Year)) {
a[[1]] <- a + sum(Revenue$`1000_revenue`[Revenue$Year == val], na.rm = TRUE)
print(a)
print(val)
}
}
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
sum(Revenue$`1000_revenue`)
Revenue <- read_xlsx("data/Revenue-gross margin-gross profit worldwide 2015-2020.xlsx", sheet = "Revenues (automotive)", col_types = c("numeric", "text", "numeric", "numeric"))
sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE)
sum(Revenue$`1000_revenue`, na.rm = TRUE)
c(sum(Revenue$Year[min(input$Yearrevline)[Revenue$`1000_revenue`]], na.rm = TRUE):
sum(Revenue$Year[max(input$Yearrevline)[Revenue$`1000_revenue`]], na.rm = TRUE))
c(sum(Revenue$Year[2015[Revenue$`1000_revenue`]], na.rm = TRUE):
sum(Revenue$Year[2020[Revenue$`1000_revenue`]], na.rm = TRUE))
c(sum(Revenue$Year[2015][Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[2020][Revenue$`1000_revenue`], na.rm = TRUE))
c(sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE))
a <-  c(sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE):
sum(Revenue$Year[Revenue$`1000_revenue`], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Year == 2020], na.rm = TRUE))
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020], na.rm = TRUE))
print(a)
a <-  c(sum(Revenue$`1000_revenue`[Revenue$Year == 2015][1], na.rm = TRUE):
sum(Revenue$`1000_revenue`[Revenue$Year == 2020][1], na.rm = TRUE))
print(a)
