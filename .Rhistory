Free_cashflownorm <- Free_cashflow %>% select(Date, `free cash flow`)
Revenuetabelsom <- Revenuetabel %>% select(Date, totalrevenue)
Gross_profitsom <- Gross_profit %>% select(Date, totalgrossprofit)
Gross_Marginsom <- Gross_Margin %>% select(Date, totalgrossmargin)
Free_cashflowsom <- Free_cashflow %>% select(Date, totalfreecashflow)
Financial_numbersnorm <- left_join(Revenuetabelnorm, Gross_profitnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Gross_Marginnorm, by = "Date")
Financial_numbersnorm <- left_join(Financial_numbersnorm, Free_cashflownorm, by = "Date")
Financial_numbersnorm <- Financial_numbersnorm %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numbersnorm$'Year' <- as.numeric(Financial_numbersnorm$'Year')
Financial_numbersnorm$'Revenue' <- as.numeric(Financial_numbersnorm$'Revenue')
Financial_numbersnorm$'Gross Profit' <- as.numeric(Financial_numbersnorm$'Gross Profit')
Financial_numbersnorm$'Gross Margin' <- as.numeric(Financial_numbersnorm$'Gross Margin')
Financial_numbersnorm$'free cash flow' <- as.numeric(Financial_numbersnorm$'free cash flow')
Financial_numbers_gather_norm <- Financial_numbersnorm %>% gather('Revenue', 'Gross Profit', 'Gross Margin', 'free cash flow', key = 'typenumber', value = 'finvalue')
Financial_numberssom <- left_join(Revenuetabelsom, Gross_profitsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Gross_Marginsom, by = "Date")
Financial_numberssom <- left_join(Financial_numberssom, Free_cashflowsom, by = "Date")
Financial_numberssom <- Financial_numberssom %>% separate(Date, sep = " ", into = c("Year", "Quarter"))
Financial_numberssom$'Year' <- as.numeric(Financial_numberssom$'Year')
Financial_numberssom$'totalrevenue' <- as.numeric(Financial_numberssom$'totalrevenue')
Financial_numberssom$'totalgrossprofit' <- as.numeric(Financial_numberssom$'totalgrossprofit')
Financial_numberssom$'totalgrossmargin' <- as.numeric(Financial_numberssom$'totalgrossmargin')
Financial_numberssom$'totalfreecashflow' <- as.numeric(Financial_numberssom$'totalfreecashflow')
Financial_numbers_gather_som <- Financial_numberssom %>% gather('totalrevenue', 'totalgrossprofit', 'totalgrossmargin', 'totalfreecashflow', key = 'typenumber', value = 'finvalue') %>% select(Year, typenumber, finvalue) %>% distinct()
##financiele cijfers, functies
financefunction <- function(yearinput,df) {
financefunction <- df %>% filter(df$Year == yearinput)
return(financefunction)
}
# #uitbreiding europa, data in juiste vorm krijgen
# countriesafpassengercars <- countriesafpassengercars %>% gather('BEV', 'H2', 'CNG', 'LNG', 'PHEV', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
# countriesafpassengercars$Country[1:2457] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
#                                         'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
#                                         'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
#                                         'Spain', 'Sweden')
# countriesafinfrastructure <- countriesafinfrastructure %>% gather('Electricity', 'H2', 'Natural Gas', 'LPG', 'Total', key = 'Fuel', value = 'waardes')
# countriesafinfrastructure$Country[1:1755] <- c('Ausria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia',
#                                               'Finland', 'France', 'Germany', 'Greece', 'Hungria', 'Ireland', 'Italy', 'Latvia', 'Lithuania',
#                                               'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia',
#                                               'Spain', 'Sweden')
#
# #wereldkaart
#
# teslapercountrysales <- read_xlsx("Data/Verkoop landen tesla.xlsx", skip = 1, col_types = c("text", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")) %>% gather('2013', '2014', '2015', '2016', '2017', '2018', '2019', key = 'jaar', value = 'waarde')
#
# some.eu.countries <- c('Ukraine', 'France', 'Spain', 'Sweden', 'Norway', 'Germany', 'Finland', 'Poland', 'Italy', 'UK', 'Romania', 'Belarus', 'Greece', 'Bulgaria', 'Iceland', 'Hungary', 'Portugal', 'Austria', 'Czech Republic', 'Serbia', 'Ireland', 'Lithuania', 'Latvia', 'Croatia', 'Bosnia and Herzegovina', 'Slovakia', 'Estonia', 'Denmark', 'Netherlands', 'Switzerland', 'Moldova', 'Belgium', 'Armenia', 'Albania', 'Macedonia', 'Turkey', 'Slovenia', 'Montenegro', 'Kosovo', 'Cyprus', 'Luxembourg', 'Georgia', 'Andorra', 'Malta', 'Liechtenstein', 'San Marino', 'Monaco', 'Vatican')
#
# some.eu.map <- map_data("world", region = some.eu.countries)
# tesla.eu.map <- left_join(some.eu.map, teslapercountrysales, by = "region")
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
runApp('Dashboard_Lien')
<<<<<<< HEAD
Financial_numbers_gather_som %>% filter(Year == input$Yearrev, typenumber == 'totalrevenue') %>% group_by(Year)
=======
runApp()
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard_Caro')
runApp()
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 & Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 || Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
library(readxl)
library(tidyr)
<<<<<<< HEAD
library(readr)
library(forcats)
library(lubridate)
library(quantmod)
library(plotly)
library(tidyverse)
library(tidyquant)
#getSymbols("TSLA", src = "yahoo", from = start, to = end)
TSLA <- tq_get("TSLA", get = "stock.prices", from = "2015-09-01", to = "2020-11-13")
tail(TSLA)
TSLA %>% ggplot(aes(x='date' , y= "close")) + geom_abline()
TSLA %>% ggplot(aes(date , close)) + geom_abline()
TSLA %>% ggplot(aes(date , close)) + geom_line()
TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA Line Chart", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA Line Chart", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
#getSymbols("TSLA", src = "yahoo", from = start, to = end)
TSLA <- tq_get("TSLA", get = "stock.prices", from = start, to = end)
tail(TSLA)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") +
theme_tq()
ggplotly(p)
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard_Jaske')
runApp('Dashboard')
<<<<<<< HEAD
install.packages('ggextra')
install.packages('ggExtra')
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('~/Unief 2/1e Master/Business intelligence/Project/BUSIN/Dashboard_Lien')
runApp('Dashboard_Lien')
>>>>>>> f71ce88a5ebe6a14b00d7e726d407cec96acea3d
>>>>>>> 0bbc61cd555d59b08f4b67ea712b20bf6595f290
shiny::runApp('Dashboard')
=======
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
runApp('Dashboard')
runApp('Dashboard')
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") + geom_smooth()
theme_tq()
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") + geom_smooth(method = "lm") +
theme_tq()
ggplotly(p)
p <- TSLA %>% ggplot(aes(date , close)) + geom_line() +
labs(title = "TSLA stock evolution", y = "Closing Price", x = "") +
theme_tq()
runApp('Dashboard')
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
#VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = Sales - lag(Sales))
VPSC2
VPS
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[max(Year)] - Sales[min(Year)]))
VPSC2
<<<<<<< HEAD
<<<<<<< HEAD
knitr::opts_chunk$set(echo = TRUE)
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
library(readxl)
library(tidyr)
library(dplyr)
library(ggplot2)
VPS <- read_xlsx("Data/New cars sold in the EU by segment in million units.xlsx")
VPS <- VPS %>% gather('2008':'2019', key=  "Year", value="Sales")
summary(VPS)
VPS$Year <- as.numeric(VPS$Year)
VPS$Sales <- as.double(VPS$Sales)
VPS %>% ggplot(aes(x=Year, y=Sales)) + geom_line(aes(color = Segment)) + labs(title = "New cars sold in the EU by segment in million units over the years.") + scale_x_continuous(breaks = c(2008:2019)) + scale_y_continuous(breaks= seq(0,6, by = 1))
VPSC2 <- VPS %>% filter(Year == 2019 | Year == 2018)
VPSC2 <- VPSC2 %>% group_by(Segment) %>% mutate(Difference = (Sales[Year == max(Year)] - Sales[Year == min(Year)]))
VPSC2
shiny::runApp('Dashboard_Jaske')
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
install.packages("tidyquant")
shiny::runApp('Dashboard')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard_Caro')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
install.packages('toOrdinal')
install.packages("toOrdinal")
install.packages('toOrdinal')
install.packages("toOrdinal")
=======
>>>>>>> 9f2a9943015a3840ac6a2ab2962568a9c8ddd003
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
=======
=======
>>>>>>> 298fd560bd9a0f444a6ba4fc40a7d7f1de761adc
>>>>>>> 14648ab262cf6ba991ba07d752a6ef11dd98ef03
>>>>>>> 87b4dc347e106e2f98a8a11e5128bc0901094eda
=======
runApp('Dashboard')
runApp('Dashboard')
>>>>>>> 9f2a9943015a3840ac6a2ab2962568a9c8ddd003
shiny::runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
devtools::install_github("rensa/ggflags"
runApp('Dashboard')
runApp('Dashboard')
<<<<<<< HEAD
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
View(tesla.eu.map)
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
=======
devtools::install_github("rensa/ggflags"
)
devtools::install_github("rensa/ggflags")
devtools::install_github('vincentarelbundock/countrycode')
install.packages("devtools")
devtools::install_github("rensa/ggflags")
devtools::install_github("rensa/ggflags")
library(RSQLite)
runApp('Dashboard')
runApp('Dashboard')
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Convert to numerics
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
str(groco_data)
View(groco_data)
groco_data$'Share In EV Market In 2018 '  <- as.numeric(groco_data$'Share In EV Market In 2018 ')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
View(groco_data)
str(groco_data)
<<<<<<< HEAD
>>>>>>> 9f2a9943015a3840ac6a2ab2962568a9c8ddd003
=======
shiny::runApp('Dashboard')
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
# Load growth comparison (groco) data
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
View(groco_data)
str(groco_data)
# Clean it
# Convert to numerics
#Merk op dat dit "New" omzet in "NA"
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
print("Hello")
>>>>>>> bf7d1b4da0cf63e2db6d7c851adc56530bfbdab6
shiny::runApp('Dashboard')
devtools::install_github("rensa/ggflags")
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp()
runApp()
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
runApp('Dashboard')
knitr::opts_chunk$set(echo = TRUE)
##Best selling EV's compared
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
library(RSQLite)
library(tidyverse)
##Best selling EV's compared
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
library(RSQLite)
library(tidyverse)
library(readr)
library(read_xlsx)
```{r}
library(RSQLite)
library(tidyverse)
library(readr)
library(readxl)
##Best selling EV's compared
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
groco_data_gather <- groco_data %>% gather("Sales In 2019",
"Sales In 2018",
"Change In Sales From 2018 To 2019 (%)",
"Share In EV Market In 2019",
"Share In EV Market In 2018",
"Proportion Of Sales Of This Model That Was EV In 2019 (%)",
"Proportion Of Sales Of This Model That Was EV In 2018 (%)",
"Range",
"Top Speed (km/h)",
"Acceleration (0-100 km/h)",
"Horsepower",
"Top Charging Speed (km/h)",
"Price",
"Trunk Space (Including Frunk If Applicable)",
"NCAP Stars",
"NCAP Adult Occupant Score (%)",
"NCAP Child Occupant Score (%)",
"NCAP Vulnerable Road Users Score (%)",
"NCAP Safety Assist Score (%)",
"NCAP Average Score (%)",
key = "Type",
value = "Value"
)
groco_data_gather$"Value" <- as.numeric(groco_data_gather$"Value")
groco_data_gather$"Type"  <- as.character(groco_data_gather$"Type")
dbWriteTable(con, "groco_data_gather", groco_data_gather)
# Establish connection with the database
con <- dbConnect(drv = SQLite(), "Tesla_database.sqlite")
##Best selling EV's compared
groco_data <- read_xlsx("Data/growth_comparison_v7.xlsx")
groco_data$'Change In Sales From 2018 To 2019 (%)'  <- as.numeric(groco_data$'Change In Sales From 2018 To 2019 (%)')
groco_data$'Share In EV Market In 2018'  <- as.numeric(groco_data$'Share In EV Market In 2018')
groco_data_gather <- groco_data %>% gather("Sales In 2019",
"Sales In 2018",
"Change In Sales From 2018 To 2019 (%)",
"Share In EV Market In 2019",
"Share In EV Market In 2018",
"Proportion Of Sales Of This Model That Was EV In 2019 (%)",
"Proportion Of Sales Of This Model That Was EV In 2018 (%)",
"Range",
"Top Speed (km/h)",
"Acceleration (0-100 km/h)",
"Horsepower",
"Top Charging Speed (km/h)",
"Price",
"Trunk Space (Including Frunk If Applicable)",
"NCAP Stars",
"NCAP Adult Occupant Score (%)",
"NCAP Child Occupant Score (%)",
"NCAP Vulnerable Road Users Score (%)",
"NCAP Safety Assist Score (%)",
"NCAP Average Score (%)",
key = "Type",
value = "Value"
)
groco_data_gather$"Value" <- as.numeric(groco_data_gather$"Value")
groco_data_gather$"Type"  <- as.character(groco_data_gather$"Type")
dbWriteTable(con, "groco_data_gather", groco_data_gather)
shiny::runApp('Dashboard')
runApp('Dashboard')
shiny::runApp('Dashboard')
